{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/about/index/github.png","path":"about/index/github.png","modified":1,"renderable":0},{"_id":"source/about/index/linkedin.png","path":"about/index/linkedin.png","modified":1,"renderable":0},{"_id":"source/about/index/mail.png","path":"about/index/mail.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1586033434296},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1586033434296},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1586033434297},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1586033434301},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1586033434302},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1586033434302},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1586033434302},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1586033434302},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1586033434303},{"_id":"themes/next/_config.yml","hash":"3abf413086419b0a09087456655bc11447564d35","modified":1586059062837},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1586033434311},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1586033434339},{"_id":"source/_posts/ArrayToList.md","hash":"9f42989b56a364547f0997fd7ef1b642551e960f","modified":1586051519103},{"_id":"source/_posts/InteractiveMap_01.md","hash":"ac6b4f28d4d7467127ca2a2b5bc6ab80a5a3a2ae","modified":1586054003467},{"_id":"source/_posts/InteractiveMap_02.md","hash":"e7c0a26adeda11168654bc96aae9fab873a3f37e","modified":1586053991888},{"_id":"source/_posts/InteractiveMap_03.md","hash":"5f0629f1b7cf0a4dd89a6bf52b95cc036ba7eea1","modified":1586054049032},{"_id":"source/_posts/Introduction-to-Java-Garbage-Collection.md","hash":"57a24794e4495f8572fa6e9fd88c302735803bd2","modified":1586053279206},{"_id":"source/_posts/JVM-Memory-Structure.md","hash":"e43bdcdbc6273db2a8a1042ec58e50d14ee7315e","modified":1586052038146},{"_id":"source/_posts/JavaInstallation.md","hash":"9046709e6e183c568d0649003382a7f797d2d026","modified":1586051412887},{"_id":"source/about/index.md","hash":"f17b9116efa13d682b7cdedd806fdef94ca3a72c","modified":1586048283275},{"_id":"source/categories/index.md","hash":"3f201048698a577d0d05541702462969415d9467","modified":1586033308960},{"_id":"source/tags/index.md","hash":"70fabae3d624cf2a4f29925ad613b3deb125e896","modified":1586033308960},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1586033434297},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1586033434298},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1586033434299},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1586033434299},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1586033434300},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1586033434300},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1586033434300},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1586033434300},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1586033434301},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1586033434301},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1586033434301},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1586033434304},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1586033434304},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1586033434305},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1586033434305},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1586033434304},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1586033434305},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1586033434306},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1586033434306},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1586033434306},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1586033434312},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1586033434312},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1586033434312},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1586033434313},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1586033434313},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1586033434313},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1586033434312},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1586033434314},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1586033434314},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1586033434314},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1586033434315},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1586033434314},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1586033434315},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1586033434315},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1586033434315},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1586033434316},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1586033434316},{"_id":"themes/next/languages/tr.yml","hash":"46e09f2119cbfbcf93fb8dbd267dccabeb8b0cda","modified":1586033434316},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1586033434316},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1586033434317},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1586033434317},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1586033434317},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1586033434317},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1586033434338},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1586033434338},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1586033434338},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1586033434338},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1586033434339},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1586033434339},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1586033434346},{"_id":"source/_posts/Introduction-to-Java-Garbage-Collection/garbage.png","hash":"9828b675a619a928f50758dbf9599c719de468e3","modified":1586033308953},{"_id":"source/_posts/JavaInstallation/advanced.png","hash":"df5ee7f37adc321ff7a88bdfe0c0ba0471a200ea","modified":1586033308957},{"_id":"source/_posts/JavaInstallation/version.png","hash":"352208c444602b1a31edd2be769f0a47f0c6d318","modified":1586033308960},{"_id":"source/about/index/github.png","hash":"6a24c11dd3ba4c61da8219ba4fe259d4e6947e7e","modified":1586045121817},{"_id":"source/about/index/linkedin.png","hash":"29abed2aea21bf62586d06e8f4aa9b2c5ff87579","modified":1586045112901},{"_id":"source/about/index/mail.png","hash":"a6b7620fcd53f9f26ee0eb24d96c02676a7e5d0d","modified":1586047938899},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1586033434298},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1586033434298},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1586033434299},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1586033434298},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1586033434308},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1586033434309},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1586033434309},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1586033434310},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1586033434310},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1586033434310},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1586033434310},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1586033434311},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1586033434311},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1586033434307},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1586033434307},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1586033434307},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1586033434308},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1586033434325},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1586033434326},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1586033434327},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1586033434328},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1586033434328},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1586033434318},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1586033434318},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1586033434318},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1586033434319},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0e650e97d5fadc4b8a9a0fec00fe7db642dc3f76","modified":1586033434319},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1586033434321},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1586033434322},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1586033434325},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"bd9ba0bf60cc3008ee14339fa395ee6af188e879","modified":1586033434330},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1586033434333},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1586033434334},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1586033434334},{"_id":"themes/next/scripts/events/index.js","hash":"7baf362743b3d30626066614d877891fc140c502","modified":1586033434340},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1586033434343},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1586033434343},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1586033434344},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1586033434344},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1586033434344},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1586033434345},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1586033434345},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1586033434346},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1586033434345},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1586033434346},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1586033434346},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1586033434347},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1586033434347},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1586033434347},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1586033434348},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1586033434348},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1586033434348},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1586033434348},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1586033434348},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1586033434349},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1586033434369},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1586033434377},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1586033434377},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1586033434377},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1586033434377},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1586033434378},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1586033434378},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1586033434379},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1586033434379},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1586033434379},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1586033434380},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1586033434380},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1586033434380},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1586033434380},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1586033434380},{"_id":"themes/next/source/js/algolia-search.js","hash":"f0cee802b4d48d5e78ba88d77d4257cb8a88dd6e","modified":1586033434381},{"_id":"themes/next/source/js/local-search.js","hash":"f43b891fcd55b8153a8999a39d801c74ef5da0f7","modified":1586033434381},{"_id":"themes/next/source/js/bookmark.js","hash":"2268bfcab8cf9019e590e2d356b08a3d4a0cf791","modified":1586033434381},{"_id":"themes/next/source/js/next-boot.js","hash":"509c5b02446d4989a6ef3081cafeb9497cdde4e5","modified":1586033434382},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1586033434382},{"_id":"themes/next/source/js/utils.js","hash":"2c5bc91559a19a5d1c9e691a46f472fe82fdcc4e","modified":1586033434383},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1586033434384},{"_id":"source/_posts/Introduction-to-Java-Garbage-Collection/CDC.png","hash":"5f4c4750a11690d7be14f91e09ab1365f86dccce","modified":1586033308950},{"_id":"source/_posts/Introduction-to-Java-Garbage-Collection/Copy.png","hash":"aa7277e8106fff91c1c23e1097be846de305fecd","modified":1586033308951},{"_id":"source/_posts/Introduction-to-Java-Garbage-Collection/reference_counting.png","hash":"ddf61e3cef0eb5f5fd7a1ee60ef54e8dc806f547","modified":1586033308954},{"_id":"source/_posts/Introduction-to-Java-Garbage-Collection/reachability.png","hash":"5163797a73533aeb5d1bd00eebc679930c7db0f0","modified":1586033308954},{"_id":"source/_posts/JVM-Memory-Structure/JVM-Memory.pptx","hash":"0f7e5caf6af0411e058ca365ea50738e90975710","modified":1586033308957},{"_id":"source/_posts/JavaInstallation/java-oracle.png","hash":"dee0430492bbd757931f08f61ce0ac99481ddb96","modified":1586033308958},{"_id":"source/_posts/JavaInstallation/system-setting.png","hash":"d9a244a9813aa14fe95ecbbaa15cc87fcd6e90b3","modified":1586033308959},{"_id":"source/_posts/JVM-Memory-Structure/JVM-Memory.png","hash":"6ad84c2144a0475258b2461028f591e7b5676008","modified":1586033308956},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1586033434326},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1586033434327},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1586033434327},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1586033434327},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1586033434328},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1586033434320},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1586033434319},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1586033434320},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1586033434320},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1586033434321},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1586033434321},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1586033434321},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1586033434322},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1586033434322},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1586033434323},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1586033434323},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1586033434323},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1586033434324},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1586033434324},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1586033434324},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1586033434324},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1586033434325},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1586033434325},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1586033434329},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1586033434329},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1586033434329},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1586033434330},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1586033434330},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1586033434330},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1586033434331},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1586033434331},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1586033434332},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1586033434332},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1586033434332},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1586033434333},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1586033434333},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1586033434333},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1586033434334},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1586033434334},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1586033434335},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1586033434335},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1586033434336},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1586033434336},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1586033434336},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1586033434337},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1586033434337},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1586033434337},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1586033434337},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1586033434341},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1586033434341},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1586033434342},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1586033434342},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1586033434342},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1586033434343},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1586033434343},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1586033434342},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1586033434340},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1586033434340},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1586033434341},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1586033434375},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1586033434375},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1586033434376},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1586033434376},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1586033434376},{"_id":"themes/next/source/js/schemes/muse.js","hash":"78c77614b9fe0d7d97aa08468c6cffbcbda96b75","modified":1586033434383},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"1a9741145938e2c754a808381350723cbebf43c5","modified":1586033434383},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1586033434387},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1586033434387},{"_id":"source/_posts/Introduction-to-Java-Garbage-Collection/Java-GC.pptx","hash":"2298ec0216125f25ed09d115a4f563ab8c51bfe1","modified":1586033308952},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1586033434350},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1586033434349},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1586033434350},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1586033434355},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1586033434359},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1586033434359},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1586033434363},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1586033434363},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1586033434364},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1586033434365},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1586033434366},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1586033434366},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"7ed4733240206d1aa729c835e69a85f8f3c73cd6","modified":1586033434366},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1586033434368},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1586033434369},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1586033434370},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1586033434370},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1586033434370},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1586033434371},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1586033434371},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1586033434373},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1586033434373},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1586033434373},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1586033434374},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1586033434374},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1586033434374},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1586033434371},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1586033434371},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1586033434372},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1586033434372},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1586033434372},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1586033434373},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1586033434385},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1586033434384},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1586033434386},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1586033434350},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1586033434351},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1586033434351},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1586033434351},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1586033434351},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1586033434352},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1586033434352},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1586033434353},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1586033434353},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1586033434353},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1586033434353},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1586033434354},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"82a275ca74086a46b8e82d5ebf78c7a807cd9c8b","modified":1586033434354},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1586033434353},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1586033434354},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1586033434354},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1586033434355},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1586033434355},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1586033434355},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1586033434356},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1586033434356},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1586033434357},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1586033434356},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1586033434356},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1586033434357},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1586033434357},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1586033434358},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1586033434358},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1586033434358},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1586033434359},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1586033434359},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1586033434360},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1586033434360},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1586033434361},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1586033434361},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1586033434361},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1586033434362},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1586033434362},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1586033434362},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1586033434362},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1586033434362},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1586033434364},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1586033434364},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1586033434365},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1586033434365},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1586033434366},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1586033434367},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1586033434367},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1586033434368},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1586033434368},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1586033434368},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1586033434368},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1586033434385},{"_id":"public/about/index.html","hash":"085e0653793d991f00718ce293f17af511e1596d","modified":1586059427281},{"_id":"public/tags/index.html","hash":"2ec18d57a11cfd71816f6d5e70e9439601fb0d2d","modified":1586059427281},{"_id":"public/categories/index.html","hash":"5ccefad0e9dcaf4858c9cbdd74f8cc4a09c3d6d9","modified":1586059427281},{"_id":"public/2018/02/07/JVM-Memory-Structure/index.html","hash":"5419654171de3541cb48a7b58b54793709464e32","modified":1586059427281},{"_id":"public/2017/11/19/ArrayToList/index.html","hash":"38240b8d928a56592a6b115bb4ff14086acac960","modified":1586059427281},{"_id":"public/archives/index.html","hash":"80ca4362769074f732626b2e54df740671f94a64","modified":1586059427281},{"_id":"public/archives/2017/index.html","hash":"15b2e1c00823b85c7f16d8bc92bb87294864873a","modified":1586059427281},{"_id":"public/archives/2017/11/index.html","hash":"b40191da8698440b5bb2e72f61a3c60971f06208","modified":1586059427281},{"_id":"public/archives/2018/index.html","hash":"ea35a279396be02b09f5d83bf25cd7154bf62e60","modified":1586059427281},{"_id":"public/archives/2018/01/index.html","hash":"4a91d814205406deb8b51bb1fba87ce8fb9fb651","modified":1586059427281},{"_id":"public/archives/2018/02/index.html","hash":"22a9a5acd9fb0f815ca1b53b0120fd9696f3b2b3","modified":1586059427281},{"_id":"public/tags/JavaScript/index.html","hash":"58c93d1aaaf82cc09b51018e433412d2aa10c3ea","modified":1586059427281},{"_id":"public/tags/D3/index.html","hash":"b7f422e062e7eaddb94e11d3fb21bf4e1c3ae984","modified":1586059427281},{"_id":"public/tags/Java/index.html","hash":"5faa778b873d317f86410ac9855044de9bf76fcc","modified":1586059427281},{"_id":"public/tags/JVM/index.html","hash":"4fe43109a770301b75cb61952018db8555f6c221","modified":1586059427281},{"_id":"public/categories/Data-Visualization/index.html","hash":"8479fe932f364d446463ae412597cbb9b87a551e","modified":1586059427281},{"_id":"public/categories/Basic-Java/index.html","hash":"f038b3bbecd5274d4b8fe5598c1914eee35c65d4","modified":1586059427281},{"_id":"public/2018/02/14/Introduction-to-Java-Garbage-Collection/index.html","hash":"6e1b128d080f14969287514e8a1bacb825647547","modified":1586059427281},{"_id":"public/2018/02/05/InteractiveMap_03/index.html","hash":"46170a704fa2c78e25fd368b0745fda8571b104b","modified":1586059427281},{"_id":"public/2018/01/31/InteractiveMap_02/index.html","hash":"639de307ba60d0abea7ac30f35aa87d1e517a984","modified":1586059427281},{"_id":"public/2018/01/19/InteractiveMap_01/index.html","hash":"553fb4f8ec68ed9b1e94579d55e157dd1d224d80","modified":1586059427281},{"_id":"public/2017/11/19/JavaInstallation/index.html","hash":"7e815303461a908cfc8b2b9e59feca0581981187","modified":1586059427281},{"_id":"public/index.html","hash":"5b62f36fa3adf9665fea7a77f52345ecf31b18fc","modified":1586059427281},{"_id":"public/categories/Advanced-Java/index.html","hash":"d898496a13ba0e1344a037d26fc027814a2861f3","modified":1586059427281},{"_id":"public/about/index/github.png","hash":"6a24c11dd3ba4c61da8219ba4fe259d4e6947e7e","modified":1586059427281},{"_id":"public/about/index/linkedin.png","hash":"29abed2aea21bf62586d06e8f4aa9b2c5ff87579","modified":1586059427281},{"_id":"public/about/index/mail.png","hash":"a6b7620fcd53f9f26ee0eb24d96c02676a7e5d0d","modified":1586059427281},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1586059427281},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1586059427281},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1586059427281},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1586059427281},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1586059427281},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1586059427281},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1586059427281},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1586059427281},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1586059427281},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1586059427281},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1586059427281},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1586059427281},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1586059427281},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1586059427281},{"_id":"public/2017/11/19/JavaInstallation/advanced.png","hash":"df5ee7f37adc321ff7a88bdfe0c0ba0471a200ea","modified":1586059427281},{"_id":"public/2017/11/19/JavaInstallation/version.png","hash":"352208c444602b1a31edd2be769f0a47f0c6d318","modified":1586059427281},{"_id":"public/2018/02/14/Introduction-to-Java-Garbage-Collection/garbage.png","hash":"9828b675a619a928f50758dbf9599c719de468e3","modified":1586059427281},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1586059427281},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1586059427281},{"_id":"public/2017/11/19/JavaInstallation/java-oracle.png","hash":"dee0430492bbd757931f08f61ce0ac99481ddb96","modified":1586059427281},{"_id":"public/2018/02/14/Introduction-to-Java-Garbage-Collection/CDC.png","hash":"5f4c4750a11690d7be14f91e09ab1365f86dccce","modified":1586059427281},{"_id":"public/2018/02/14/Introduction-to-Java-Garbage-Collection/Copy.png","hash":"aa7277e8106fff91c1c23e1097be846de305fecd","modified":1586059427281},{"_id":"public/2018/02/14/Introduction-to-Java-Garbage-Collection/reference_counting.png","hash":"ddf61e3cef0eb5f5fd7a1ee60ef54e8dc806f547","modified":1586059427281},{"_id":"public/js/algolia-search.js","hash":"23cc3c013185eb97ef347c3b4c92d928f2f3398f","modified":1586059427281},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1586059427281},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1586059427281},{"_id":"public/js/next-boot.js","hash":"a22eeb6048ddd6b9224c8a671cbcfa303a2f7a1a","modified":1586059427281},{"_id":"public/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1586059427281},{"_id":"public/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1586059427281},{"_id":"public/css/main.css","hash":"2971bdc0e8ea170744b812a4988029a7db70984d","modified":1586059427281},{"_id":"public/2018/02/07/JVM-Memory-Structure/JVM-Memory.png","hash":"6ad84c2144a0475258b2461028f591e7b5676008","modified":1586059427281},{"_id":"public/2017/11/19/JavaInstallation/system-setting.png","hash":"d9a244a9813aa14fe95ecbbaa15cc87fcd6e90b3","modified":1586059427281},{"_id":"public/2018/02/14/Introduction-to-Java-Garbage-Collection/reachability.png","hash":"5163797a73533aeb5d1bd00eebc679930c7db0f0","modified":1586059427281},{"_id":"public/js/local-search.js","hash":"d6673063958127a03881dab2f0376a47f5e08a88","modified":1586059427281},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1586059427281},{"_id":"public/2018/02/07/JVM-Memory-Structure/JVM-Memory.pptx","hash":"0f7e5caf6af0411e058ca365ea50738e90975710","modified":1586059427281},{"_id":"public/js/utils.js","hash":"91d174e12c61c332f3b06085d635c2b0f686a758","modified":1586059427281},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1586059427281},{"_id":"public/2018/02/14/Introduction-to-Java-Garbage-Collection/Java-GC.pptx","hash":"2298ec0216125f25ed09d115a4f563ab8c51bfe1","modified":1586059427281},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1586059427281},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1586059427281}],"Category":[{"name":"Data Visualization","_id":"ck8mityvb00045weq8dds30yp"},{"name":"Basic Java","_id":"ck8mityvg000a5weq79a9bobi"},{"name":"Advanced Java","_id":"ck8mityvk000k5weq0nlw0wtj"}],"Data":[],"Page":[{"title":"About","date":"2020-02-17T07:04:16.000Z","_content":"# About\n#### About me\nHi, my name is Han Bao. I am a software engineer at Arris (acquired by [CommScope](https://www.commscope.com/) in 2019).\n\nI gained my master degree in **Computer Science** from [Worcester Polytechnic Institute](https://www.wpi.edu/) in 2018.\n\nI found so much fun in technology and programming. So I hope I can share the joy of coding through this blog.\n\n***\n\n#### My Other Works\n\nCheckout out some of my projects,\n\n###### Movie Website\n\nA movie website developed in Python Django. Visit at http://movie.hbao.blog/\n\nSee source code in my [Github repo](https://github.com/BruceHenry/movie-website-django).\n\n###### World Population Map\n\nA D3.js data visualization of our future world. Visit at [Github pages](https://brucehenry.github.io/WorldPopulationData/)\n\nSee source code in my [Github repo](https://github.com/BruceHenry/WorldPopulationData).\n\n######  Shopping List\n\nA React website. Visit at [Github pages](https://brucehenry.github.io/shopping-list-react/public/index.html)\n\nSee source code in my [Github repo](https://github.com/BruceHenry/shopping-list-react).\n\n***\n\n#### Contacts\n<a href=\"mailto:hanbao181204@gmail.com\" class=\"fancybox\" target=\"_blank\" rel=\"external\">\n    <img src=\"index/mail.png\" align=\"left\" width=\"50\" height=\"50\" alt=\"Email: hanbao181204@gmail.com\" title=\"Email\">\n</a>\n<a href=\"https://github.com/BruceHenry\" class=\"fancybox\" target=\"_blank\" rel=\"external\">\n    <img src=\"index/github.png\" align=\"left\" width=\"50\" height=\"50\" alt=\"github.com/BruceHenry\" title=\"Github\">\n</a>\n<a href=\"https://www.linkedin.com/in/hanbao2017/\" class=\"fancybox\" target=\"_blank\" rel=\"external\">\n    <img src=\"index/linkedin.png\" align=\"left\" width=\"50\" height=\"50\" alt=\"www.linkedin.com/in/hanbao2017/\" title=\"Linkedin\">\n</a>\n\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2020-02-17 02:04:16\n---\n# About\n#### About me\nHi, my name is Han Bao. I am a software engineer at Arris (acquired by [CommScope](https://www.commscope.com/) in 2019).\n\nI gained my master degree in **Computer Science** from [Worcester Polytechnic Institute](https://www.wpi.edu/) in 2018.\n\nI found so much fun in technology and programming. So I hope I can share the joy of coding through this blog.\n\n***\n\n#### My Other Works\n\nCheckout out some of my projects,\n\n###### Movie Website\n\nA movie website developed in Python Django. Visit at http://movie.hbao.blog/\n\nSee source code in my [Github repo](https://github.com/BruceHenry/movie-website-django).\n\n###### World Population Map\n\nA D3.js data visualization of our future world. Visit at [Github pages](https://brucehenry.github.io/WorldPopulationData/)\n\nSee source code in my [Github repo](https://github.com/BruceHenry/WorldPopulationData).\n\n######  Shopping List\n\nA React website. Visit at [Github pages](https://brucehenry.github.io/shopping-list-react/public/index.html)\n\nSee source code in my [Github repo](https://github.com/BruceHenry/shopping-list-react).\n\n***\n\n#### Contacts\n<a href=\"mailto:hanbao181204@gmail.com\" class=\"fancybox\" target=\"_blank\" rel=\"external\">\n    <img src=\"index/mail.png\" align=\"left\" width=\"50\" height=\"50\" alt=\"Email: hanbao181204@gmail.com\" title=\"Email\">\n</a>\n<a href=\"https://github.com/BruceHenry\" class=\"fancybox\" target=\"_blank\" rel=\"external\">\n    <img src=\"index/github.png\" align=\"left\" width=\"50\" height=\"50\" alt=\"github.com/BruceHenry\" title=\"Github\">\n</a>\n<a href=\"https://www.linkedin.com/in/hanbao2017/\" class=\"fancybox\" target=\"_blank\" rel=\"external\">\n    <img src=\"index/linkedin.png\" align=\"left\" width=\"50\" height=\"50\" alt=\"www.linkedin.com/in/hanbao2017/\" title=\"Linkedin\">\n</a>\n\n","updated":"2020-04-05T00:58:03.275Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck8mityv800015weqh296gr4s","content":"<h1 id=\"About\"><a href=\"#About\" class=\"headerlink\" title=\"About\"></a>About</h1><h4 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h4><p>Hi, my name is Han Bao. I am a software engineer at Arris (acquired by <a href=\"https://www.commscope.com/\" target=\"_blank\" rel=\"noopener\">CommScope</a> in 2019).</p>\n<p>I gained my master degree in <strong>Computer Science</strong> from <a href=\"https://www.wpi.edu/\" target=\"_blank\" rel=\"noopener\">Worcester Polytechnic Institute</a> in 2018.</p>\n<p>I found so much fun in technology and programming. So I hope I can share the joy of coding through this blog.</p>\n<hr>\n<h4 id=\"My-Other-Works\"><a href=\"#My-Other-Works\" class=\"headerlink\" title=\"My Other Works\"></a>My Other Works</h4><p>Checkout out some of my projects,</p>\n<h6 id=\"Movie-Website\"><a href=\"#Movie-Website\" class=\"headerlink\" title=\"Movie Website\"></a>Movie Website</h6><p>A movie website developed in Python Django. Visit at <a href=\"http://movie.hbao.blog/\" target=\"_blank\" rel=\"noopener\">http://movie.hbao.blog/</a></p>\n<p>See source code in my <a href=\"https://github.com/BruceHenry/movie-website-django\" target=\"_blank\" rel=\"noopener\">Github repo</a>.</p>\n<h6 id=\"World-Population-Map\"><a href=\"#World-Population-Map\" class=\"headerlink\" title=\"World Population Map\"></a>World Population Map</h6><p>A D3.js data visualization of our future world. Visit at <a href=\"https://brucehenry.github.io/WorldPopulationData/\" target=\"_blank\" rel=\"noopener\">Github pages</a></p>\n<p>See source code in my <a href=\"https://github.com/BruceHenry/WorldPopulationData\" target=\"_blank\" rel=\"noopener\">Github repo</a>.</p>\n<h6 id=\"Shopping-List\"><a href=\"#Shopping-List\" class=\"headerlink\" title=\"Shopping List\"></a>Shopping List</h6><p>A React website. Visit at <a href=\"https://brucehenry.github.io/shopping-list-react/public/index.html\" target=\"_blank\" rel=\"noopener\">Github pages</a></p>\n<p>See source code in my <a href=\"https://github.com/BruceHenry/shopping-list-react\" target=\"_blank\" rel=\"noopener\">Github repo</a>.</p>\n<hr>\n<h4 id=\"Contacts\"><a href=\"#Contacts\" class=\"headerlink\" title=\"Contacts\"></a>Contacts</h4><a href=\"mailto:hanbao181204@gmail.com\" class=\"fancybox\" target=\"_blank\" rel=\"external\">\n    <img src=\"index/mail.png\" align=\"left\" width=\"50\" height=\"50\" alt=\"Email: hanbao181204@gmail.com\" title=\"Email\">\n</a>\n<a href=\"https://github.com/BruceHenry\" class=\"fancybox\" target=\"_blank\" rel=\"external\">\n    <img src=\"index/github.png\" align=\"left\" width=\"50\" height=\"50\" alt=\"github.com/BruceHenry\" title=\"Github\">\n</a>\n<a href=\"https://www.linkedin.com/in/hanbao2017/\" class=\"fancybox\" target=\"_blank\" rel=\"external\">\n    <img src=\"index/linkedin.png\" align=\"left\" width=\"50\" height=\"50\" alt=\"www.linkedin.com/in/hanbao2017/\" title=\"Linkedin\">\n</a>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"About\"><a href=\"#About\" class=\"headerlink\" title=\"About\"></a>About</h1><h4 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h4><p>Hi, my name is Han Bao. I am a software engineer at Arris (acquired by <a href=\"https://www.commscope.com/\" target=\"_blank\" rel=\"noopener\">CommScope</a> in 2019).</p>\n<p>I gained my master degree in <strong>Computer Science</strong> from <a href=\"https://www.wpi.edu/\" target=\"_blank\" rel=\"noopener\">Worcester Polytechnic Institute</a> in 2018.</p>\n<p>I found so much fun in technology and programming. So I hope I can share the joy of coding through this blog.</p>\n<hr>\n<h4 id=\"My-Other-Works\"><a href=\"#My-Other-Works\" class=\"headerlink\" title=\"My Other Works\"></a>My Other Works</h4><p>Checkout out some of my projects,</p>\n<h6 id=\"Movie-Website\"><a href=\"#Movie-Website\" class=\"headerlink\" title=\"Movie Website\"></a>Movie Website</h6><p>A movie website developed in Python Django. Visit at <a href=\"http://movie.hbao.blog/\" target=\"_blank\" rel=\"noopener\">http://movie.hbao.blog/</a></p>\n<p>See source code in my <a href=\"https://github.com/BruceHenry/movie-website-django\" target=\"_blank\" rel=\"noopener\">Github repo</a>.</p>\n<h6 id=\"World-Population-Map\"><a href=\"#World-Population-Map\" class=\"headerlink\" title=\"World Population Map\"></a>World Population Map</h6><p>A D3.js data visualization of our future world. Visit at <a href=\"https://brucehenry.github.io/WorldPopulationData/\" target=\"_blank\" rel=\"noopener\">Github pages</a></p>\n<p>See source code in my <a href=\"https://github.com/BruceHenry/WorldPopulationData\" target=\"_blank\" rel=\"noopener\">Github repo</a>.</p>\n<h6 id=\"Shopping-List\"><a href=\"#Shopping-List\" class=\"headerlink\" title=\"Shopping List\"></a>Shopping List</h6><p>A React website. Visit at <a href=\"https://brucehenry.github.io/shopping-list-react/public/index.html\" target=\"_blank\" rel=\"noopener\">Github pages</a></p>\n<p>See source code in my <a href=\"https://github.com/BruceHenry/shopping-list-react\" target=\"_blank\" rel=\"noopener\">Github repo</a>.</p>\n<hr>\n<h4 id=\"Contacts\"><a href=\"#Contacts\" class=\"headerlink\" title=\"Contacts\"></a>Contacts</h4><a href=\"mailto:hanbao181204@gmail.com\" class=\"fancybox\" target=\"_blank\" rel=\"external\">\n    <img src=\"index/mail.png\" align=\"left\" width=\"50\" height=\"50\" alt=\"Email: hanbao181204@gmail.com\" title=\"Email\">\n</a>\n<a href=\"https://github.com/BruceHenry\" class=\"fancybox\" target=\"_blank\" rel=\"external\">\n    <img src=\"index/github.png\" align=\"left\" width=\"50\" height=\"50\" alt=\"github.com/BruceHenry\" title=\"Github\">\n</a>\n<a href=\"https://www.linkedin.com/in/hanbao2017/\" class=\"fancybox\" target=\"_blank\" rel=\"external\">\n    <img src=\"index/linkedin.png\" align=\"left\" width=\"50\" height=\"50\" alt=\"www.linkedin.com/in/hanbao2017/\" title=\"Linkedin\">\n</a>\n\n"},{"title":"tags","date":"2018-03-16T16:11:45.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-03-16 12:11:45\ntype: \"tags\"\n---\n","updated":"2020-04-04T20:48:28.960Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck8mityva00035weq22dxfy2a","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-03-16T16:13:07.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-03-16 12:13:07\ntype: \"categories\"\n---\n","updated":"2020-04-04T20:48:28.960Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck8mityvd00075weqbc1g22vx","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Make an Interactive Map 03 - Interaction with Charts","date":"2018-02-05T07:52:54.000Z","description":"Make the map interactive with charts (Echarts)","_content":"#### Preview: Map with Charts\nThis visualization extends from the one my previous blog.\n\nI add some **charts** which are able to show some detailed data beyond the map. To generate the charts, I used a tool called [**Echarts**](https://echarts.apache.org/en/index.html), which is an incubator project of Apache Software Foundation.\n\nLet's first see how it looks,\n<iframe width=\"820\" height=\"1060\" src=\"https://brucehenry.github.io/blog-webpage/interactive-map/03/map_with_chart.html\">You browser does not support iframe tag, <a href=\"https://brucehenry.github.io/blog-webpage/interactive-map/02/advanced_map.html\" target=\"_blank\">click here to visit</a>.</iframe>\n<!--more-->\n\n***\n\n#### About ECharts\nThough **D3** is powerful enough to make charts, it still costs a lot of time to make a good-looking one.\n\n**ECharts** provides various nice charts with well-designed styles, so that is why I choose to use ECharts. I think in the future, visualization libraries like ECharts will become more popular for general use.\n\n***\n\n#### Show me the code! \nYou can find the code at this [Github repository](https://github.com/BruceHenry/blog-webpage/tree/master/interactive-map/03).\n\nNow let me show you how easy to make a chart with **ECharts**.\n\n##### Step 1: Create a Container in HTML\nYou need to provide a container `<div>` for the charts.\n```html\n<div id=\"pie\"></div>\n<div id=\"line\"></div>\n```\n\n**Also**, you need to set the size in **CSS**. Of course you can set it with JS code if you want to make a chart with responsive size.\n```css\n#pie {\n    width: 700px;\n    height: 300px;\n    margin: auto;\n}\n\n#line {\n    width: 700px;\n    height: 300px;\n    margin: auto;\n}\n```\n##### Step 2: Use ECharts\nAfter including the ECharts JS file (download [**here**](https://ecomfe.github.io/echarts-doc/public/en/download.html)), all you need to do is calling `init()` and `setOption()`.\n\nHere is the **basic** code for a **pie chart**,\n```javascript\necharts\n    .init(document.getElementById('pie'))\n    .setOption(\n        {\n            series: [{\n                    type: 'pie',\n                    data: data\n                }]\n        });\n```\n\nOf course you can add some more **options** like,\n```javascript\necharts\n    .init(document.getElementById('pie'))\n    .setOption(\n        {\n            title: {\n                text: city + ' in ' + year,\n                top: '3%',\n                left: '50%'\n            },\n            tooltip: {\n                trigger: 'item',\n                formatter: \"{b} : {c} ({d}%)\"\n            },\n            legend: {\n                orient: 'vertical',\n                top: '5%',\n                left: 'left',\n                data: legend_array\n            },\n            series: [{\n                type: 'pie',\n                radius: '60%',\n                center: ['65%', '60%'],\n                animation: false,\n                data: data,\n                itemStyle: {\n                    emphasis: {\n                        shadowBlur: 10,\n                        shadowOffsetX: 0,\n                        shadowColor: 'rgba(0, 0, 0, 0.5)'\n                    }\n                }\n            }]\n        });\n```\n\nAnd for the **line chart** of this visualization,\n```javascript\necharts\n    .init(document.getElementById('pie'))\n    .setOption(\n        {\n            title: {\n                text: city + ' from 2000 to 2018',\n                top: '4%'\n            },\n            tooltip: {\n                trigger: 'axis'\n            },\n            grid: {\n                left: '3%',\n                right: '4%',\n                bottom: '3%',\n                containLabel: true\n            },\n            xAxis: {\n                type: 'category',\n                boundaryGap: false,\n                axisLabel: {\n                    margin: 15\n                },\n                data: [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018]\n            },\n            yAxis: {\n                type: 'value'\n            },\n            series: [{\n                type: 'line',\n                data: data\n            }]\n        });\n```\n\n##### Step 3: Update the Chart\nFinally, you need to add a controller to update the chart after input.\n\nFor **ECharts**, all you need to do is to call the above chart functions again. Echarts will update the data **automatically**. \n\nHere are some example codes,\n```javascript\nfunction render_chart() {\n    /*\n      echarts\n        .init()\n        .setOption();\n    */\n}\n\nd3.select(\"#input\").on('change', function () {\n    render_chart();\n});\n```\n***\n**The End**\n\n***","source":"_posts/InteractiveMap_03.md","raw":"---\ntitle: Make an Interactive Map 03 - Interaction with Charts\ndate: 2018-02-5 02:52:54\ncategories:\n- Data Visualization\ntags:\n- JavaScript\n- D3\ndescription: Make the map interactive with charts (Echarts)\n---\n#### Preview: Map with Charts\nThis visualization extends from the one my previous blog.\n\nI add some **charts** which are able to show some detailed data beyond the map. To generate the charts, I used a tool called [**Echarts**](https://echarts.apache.org/en/index.html), which is an incubator project of Apache Software Foundation.\n\nLet's first see how it looks,\n<iframe width=\"820\" height=\"1060\" src=\"https://brucehenry.github.io/blog-webpage/interactive-map/03/map_with_chart.html\">You browser does not support iframe tag, <a href=\"https://brucehenry.github.io/blog-webpage/interactive-map/02/advanced_map.html\" target=\"_blank\">click here to visit</a>.</iframe>\n<!--more-->\n\n***\n\n#### About ECharts\nThough **D3** is powerful enough to make charts, it still costs a lot of time to make a good-looking one.\n\n**ECharts** provides various nice charts with well-designed styles, so that is why I choose to use ECharts. I think in the future, visualization libraries like ECharts will become more popular for general use.\n\n***\n\n#### Show me the code! \nYou can find the code at this [Github repository](https://github.com/BruceHenry/blog-webpage/tree/master/interactive-map/03).\n\nNow let me show you how easy to make a chart with **ECharts**.\n\n##### Step 1: Create a Container in HTML\nYou need to provide a container `<div>` for the charts.\n```html\n<div id=\"pie\"></div>\n<div id=\"line\"></div>\n```\n\n**Also**, you need to set the size in **CSS**. Of course you can set it with JS code if you want to make a chart with responsive size.\n```css\n#pie {\n    width: 700px;\n    height: 300px;\n    margin: auto;\n}\n\n#line {\n    width: 700px;\n    height: 300px;\n    margin: auto;\n}\n```\n##### Step 2: Use ECharts\nAfter including the ECharts JS file (download [**here**](https://ecomfe.github.io/echarts-doc/public/en/download.html)), all you need to do is calling `init()` and `setOption()`.\n\nHere is the **basic** code for a **pie chart**,\n```javascript\necharts\n    .init(document.getElementById('pie'))\n    .setOption(\n        {\n            series: [{\n                    type: 'pie',\n                    data: data\n                }]\n        });\n```\n\nOf course you can add some more **options** like,\n```javascript\necharts\n    .init(document.getElementById('pie'))\n    .setOption(\n        {\n            title: {\n                text: city + ' in ' + year,\n                top: '3%',\n                left: '50%'\n            },\n            tooltip: {\n                trigger: 'item',\n                formatter: \"{b} : {c} ({d}%)\"\n            },\n            legend: {\n                orient: 'vertical',\n                top: '5%',\n                left: 'left',\n                data: legend_array\n            },\n            series: [{\n                type: 'pie',\n                radius: '60%',\n                center: ['65%', '60%'],\n                animation: false,\n                data: data,\n                itemStyle: {\n                    emphasis: {\n                        shadowBlur: 10,\n                        shadowOffsetX: 0,\n                        shadowColor: 'rgba(0, 0, 0, 0.5)'\n                    }\n                }\n            }]\n        });\n```\n\nAnd for the **line chart** of this visualization,\n```javascript\necharts\n    .init(document.getElementById('pie'))\n    .setOption(\n        {\n            title: {\n                text: city + ' from 2000 to 2018',\n                top: '4%'\n            },\n            tooltip: {\n                trigger: 'axis'\n            },\n            grid: {\n                left: '3%',\n                right: '4%',\n                bottom: '3%',\n                containLabel: true\n            },\n            xAxis: {\n                type: 'category',\n                boundaryGap: false,\n                axisLabel: {\n                    margin: 15\n                },\n                data: [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018]\n            },\n            yAxis: {\n                type: 'value'\n            },\n            series: [{\n                type: 'line',\n                data: data\n            }]\n        });\n```\n\n##### Step 3: Update the Chart\nFinally, you need to add a controller to update the chart after input.\n\nFor **ECharts**, all you need to do is to call the above chart functions again. Echarts will update the data **automatically**. \n\nHere are some example codes,\n```javascript\nfunction render_chart() {\n    /*\n      echarts\n        .init()\n        .setOption();\n    */\n}\n\nd3.select(\"#input\").on('change', function () {\n    render_chart();\n});\n```\n***\n**The End**\n\n***","slug":"InteractiveMap_03","published":1,"updated":"2020-04-05T02:34:09.032Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8mityv300005weq2vk14hjz","content":"<h4 id=\"Preview-Map-with-Charts\"><a href=\"#Preview-Map-with-Charts\" class=\"headerlink\" title=\"Preview: Map with Charts\"></a>Preview: Map with Charts</h4><p>This visualization extends from the one my previous blog.</p>\n<p>I add some <strong>charts</strong> which are able to show some detailed data beyond the map. To generate the charts, I used a tool called <a href=\"https://echarts.apache.org/en/index.html\" target=\"_blank\" rel=\"noopener\"><strong>Echarts</strong></a>, which is an incubator project of Apache Software Foundation.</p>\n<p>Let’s first see how it looks,</p>\n<iframe width=\"820\" height=\"1060\" src=\"https://brucehenry.github.io/blog-webpage/interactive-map/03/map_with_chart.html\">You browser does not support iframe tag, <a href=\"https://brucehenry.github.io/blog-webpage/interactive-map/02/advanced_map.html\" target=\"_blank\">click here to visit</a>.</iframe>\n<a id=\"more\"></a>\n\n<hr>\n<h4 id=\"About-ECharts\"><a href=\"#About-ECharts\" class=\"headerlink\" title=\"About ECharts\"></a>About ECharts</h4><p>Though <strong>D3</strong> is powerful enough to make charts, it still costs a lot of time to make a good-looking one.</p>\n<p><strong>ECharts</strong> provides various nice charts with well-designed styles, so that is why I choose to use ECharts. I think in the future, visualization libraries like ECharts will become more popular for general use.</p>\n<hr>\n<h4 id=\"Show-me-the-code\"><a href=\"#Show-me-the-code\" class=\"headerlink\" title=\"Show me the code!\"></a>Show me the code!</h4><p>You can find the code at this <a href=\"https://github.com/BruceHenry/blog-webpage/tree/master/interactive-map/03\" target=\"_blank\" rel=\"noopener\">Github repository</a>.</p>\n<p>Now let me show you how easy to make a chart with <strong>ECharts</strong>.</p>\n<h5 id=\"Step-1-Create-a-Container-in-HTML\"><a href=\"#Step-1-Create-a-Container-in-HTML\" class=\"headerlink\" title=\"Step 1: Create a Container in HTML\"></a>Step 1: Create a Container in HTML</h5><p>You need to provide a container <code>&lt;div&gt;</code> for the charts.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pie\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"line\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Also</strong>, you need to set the size in <strong>CSS</strong>. Of course you can set it with JS code if you want to make a chart with responsive size.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#pie</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">700px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#line</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">700px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Step-2-Use-ECharts\"><a href=\"#Step-2-Use-ECharts\" class=\"headerlink\" title=\"Step 2: Use ECharts\"></a>Step 2: Use ECharts</h5><p>After including the ECharts JS file (download <a href=\"https://ecomfe.github.io/echarts-doc/public/en/download.html\" target=\"_blank\" rel=\"noopener\"><strong>here</strong></a>), all you need to do is calling <code>init()</code> and <code>setOption()</code>.</p>\n<p>Here is the <strong>basic</strong> code for a <strong>pie chart</strong>,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echarts</span><br><span class=\"line\">    .init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'pie'</span>))</span><br><span class=\"line\">    .setOption(</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            series: [&#123;</span><br><span class=\"line\">                    type: <span class=\"string\">'pie'</span>,</span><br><span class=\"line\">                    data: data</span><br><span class=\"line\">                &#125;]</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Of course you can add some more <strong>options</strong> like,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echarts</span><br><span class=\"line\">    .init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'pie'</span>))</span><br><span class=\"line\">    .setOption(</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            title: &#123;</span><br><span class=\"line\">                text: city + <span class=\"string\">' in '</span> + year,</span><br><span class=\"line\">                top: <span class=\"string\">'3%'</span>,</span><br><span class=\"line\">                left: <span class=\"string\">'50%'</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            tooltip: &#123;</span><br><span class=\"line\">                trigger: <span class=\"string\">'item'</span>,</span><br><span class=\"line\">                formatter: <span class=\"string\">\"&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            legend: &#123;</span><br><span class=\"line\">                orient: <span class=\"string\">'vertical'</span>,</span><br><span class=\"line\">                top: <span class=\"string\">'5%'</span>,</span><br><span class=\"line\">                left: <span class=\"string\">'left'</span>,</span><br><span class=\"line\">                data: legend_array</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            series: [&#123;</span><br><span class=\"line\">                type: <span class=\"string\">'pie'</span>,</span><br><span class=\"line\">                radius: <span class=\"string\">'60%'</span>,</span><br><span class=\"line\">                center: [<span class=\"string\">'65%'</span>, <span class=\"string\">'60%'</span>],</span><br><span class=\"line\">                animation: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                data: data,</span><br><span class=\"line\">                itemStyle: &#123;</span><br><span class=\"line\">                    emphasis: &#123;</span><br><span class=\"line\">                        shadowBlur: <span class=\"number\">10</span>,</span><br><span class=\"line\">                        shadowOffsetX: <span class=\"number\">0</span>,</span><br><span class=\"line\">                        shadowColor: <span class=\"string\">'rgba(0, 0, 0, 0.5)'</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>And for the <strong>line chart</strong> of this visualization,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echarts</span><br><span class=\"line\">    .init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'pie'</span>))</span><br><span class=\"line\">    .setOption(</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            title: &#123;</span><br><span class=\"line\">                text: city + <span class=\"string\">' from 2000 to 2018'</span>,</span><br><span class=\"line\">                top: <span class=\"string\">'4%'</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            tooltip: &#123;</span><br><span class=\"line\">                trigger: <span class=\"string\">'axis'</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            grid: &#123;</span><br><span class=\"line\">                left: <span class=\"string\">'3%'</span>,</span><br><span class=\"line\">                right: <span class=\"string\">'4%'</span>,</span><br><span class=\"line\">                bottom: <span class=\"string\">'3%'</span>,</span><br><span class=\"line\">                containLabel: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            xAxis: &#123;</span><br><span class=\"line\">                type: <span class=\"string\">'category'</span>,</span><br><span class=\"line\">                boundaryGap: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                axisLabel: &#123;</span><br><span class=\"line\">                    margin: <span class=\"number\">15</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                data: [<span class=\"number\">2000</span>, <span class=\"number\">2001</span>, <span class=\"number\">2002</span>, <span class=\"number\">2003</span>, <span class=\"number\">2004</span>, <span class=\"number\">2005</span>, <span class=\"number\">2006</span>, <span class=\"number\">2007</span>, <span class=\"number\">2008</span>, <span class=\"number\">2009</span>, <span class=\"number\">2010</span>, <span class=\"number\">2011</span>, <span class=\"number\">2012</span>, <span class=\"number\">2013</span>, <span class=\"number\">2014</span>, <span class=\"number\">2015</span>, <span class=\"number\">2016</span>, <span class=\"number\">2017</span>, <span class=\"number\">2018</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            yAxis: &#123;</span><br><span class=\"line\">                type: <span class=\"string\">'value'</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            series: [&#123;</span><br><span class=\"line\">                type: <span class=\"string\">'line'</span>,</span><br><span class=\"line\">                data: data</span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Step-3-Update-the-Chart\"><a href=\"#Step-3-Update-the-Chart\" class=\"headerlink\" title=\"Step 3: Update the Chart\"></a>Step 3: Update the Chart</h5><p>Finally, you need to add a controller to update the chart after input.</p>\n<p>For <strong>ECharts</strong>, all you need to do is to call the above chart functions again. Echarts will update the data <strong>automatically</strong>. </p>\n<p>Here are some example codes,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render_chart</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      echarts</span></span><br><span class=\"line\"><span class=\"comment\">        .init()</span></span><br><span class=\"line\"><span class=\"comment\">        .setOption();</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">d3.select(<span class=\"string\">\"#input\"</span>).on(<span class=\"string\">'change'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    render_chart();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>The End</strong></p>\n<hr>\n","site":{"data":{}},"excerpt":"<h4 id=\"Preview-Map-with-Charts\"><a href=\"#Preview-Map-with-Charts\" class=\"headerlink\" title=\"Preview: Map with Charts\"></a>Preview: Map with Charts</h4><p>This visualization extends from the one my previous blog.</p>\n<p>I add some <strong>charts</strong> which are able to show some detailed data beyond the map. To generate the charts, I used a tool called <a href=\"https://echarts.apache.org/en/index.html\" target=\"_blank\" rel=\"noopener\"><strong>Echarts</strong></a>, which is an incubator project of Apache Software Foundation.</p>\n<p>Let’s first see how it looks,</p>\n<iframe width=\"820\" height=\"1060\" src=\"https://brucehenry.github.io/blog-webpage/interactive-map/03/map_with_chart.html\">You browser does not support iframe tag, <a href=\"https://brucehenry.github.io/blog-webpage/interactive-map/02/advanced_map.html\" target=\"_blank\">click here to visit</a>.</iframe>","more":"<hr>\n<h4 id=\"About-ECharts\"><a href=\"#About-ECharts\" class=\"headerlink\" title=\"About ECharts\"></a>About ECharts</h4><p>Though <strong>D3</strong> is powerful enough to make charts, it still costs a lot of time to make a good-looking one.</p>\n<p><strong>ECharts</strong> provides various nice charts with well-designed styles, so that is why I choose to use ECharts. I think in the future, visualization libraries like ECharts will become more popular for general use.</p>\n<hr>\n<h4 id=\"Show-me-the-code\"><a href=\"#Show-me-the-code\" class=\"headerlink\" title=\"Show me the code!\"></a>Show me the code!</h4><p>You can find the code at this <a href=\"https://github.com/BruceHenry/blog-webpage/tree/master/interactive-map/03\" target=\"_blank\" rel=\"noopener\">Github repository</a>.</p>\n<p>Now let me show you how easy to make a chart with <strong>ECharts</strong>.</p>\n<h5 id=\"Step-1-Create-a-Container-in-HTML\"><a href=\"#Step-1-Create-a-Container-in-HTML\" class=\"headerlink\" title=\"Step 1: Create a Container in HTML\"></a>Step 1: Create a Container in HTML</h5><p>You need to provide a container <code>&lt;div&gt;</code> for the charts.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pie\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"line\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Also</strong>, you need to set the size in <strong>CSS</strong>. Of course you can set it with JS code if you want to make a chart with responsive size.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#pie</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">700px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#line</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">700px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Step-2-Use-ECharts\"><a href=\"#Step-2-Use-ECharts\" class=\"headerlink\" title=\"Step 2: Use ECharts\"></a>Step 2: Use ECharts</h5><p>After including the ECharts JS file (download <a href=\"https://ecomfe.github.io/echarts-doc/public/en/download.html\" target=\"_blank\" rel=\"noopener\"><strong>here</strong></a>), all you need to do is calling <code>init()</code> and <code>setOption()</code>.</p>\n<p>Here is the <strong>basic</strong> code for a <strong>pie chart</strong>,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echarts</span><br><span class=\"line\">    .init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'pie'</span>))</span><br><span class=\"line\">    .setOption(</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            series: [&#123;</span><br><span class=\"line\">                    type: <span class=\"string\">'pie'</span>,</span><br><span class=\"line\">                    data: data</span><br><span class=\"line\">                &#125;]</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Of course you can add some more <strong>options</strong> like,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echarts</span><br><span class=\"line\">    .init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'pie'</span>))</span><br><span class=\"line\">    .setOption(</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            title: &#123;</span><br><span class=\"line\">                text: city + <span class=\"string\">' in '</span> + year,</span><br><span class=\"line\">                top: <span class=\"string\">'3%'</span>,</span><br><span class=\"line\">                left: <span class=\"string\">'50%'</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            tooltip: &#123;</span><br><span class=\"line\">                trigger: <span class=\"string\">'item'</span>,</span><br><span class=\"line\">                formatter: <span class=\"string\">\"&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            legend: &#123;</span><br><span class=\"line\">                orient: <span class=\"string\">'vertical'</span>,</span><br><span class=\"line\">                top: <span class=\"string\">'5%'</span>,</span><br><span class=\"line\">                left: <span class=\"string\">'left'</span>,</span><br><span class=\"line\">                data: legend_array</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            series: [&#123;</span><br><span class=\"line\">                type: <span class=\"string\">'pie'</span>,</span><br><span class=\"line\">                radius: <span class=\"string\">'60%'</span>,</span><br><span class=\"line\">                center: [<span class=\"string\">'65%'</span>, <span class=\"string\">'60%'</span>],</span><br><span class=\"line\">                animation: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                data: data,</span><br><span class=\"line\">                itemStyle: &#123;</span><br><span class=\"line\">                    emphasis: &#123;</span><br><span class=\"line\">                        shadowBlur: <span class=\"number\">10</span>,</span><br><span class=\"line\">                        shadowOffsetX: <span class=\"number\">0</span>,</span><br><span class=\"line\">                        shadowColor: <span class=\"string\">'rgba(0, 0, 0, 0.5)'</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>And for the <strong>line chart</strong> of this visualization,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echarts</span><br><span class=\"line\">    .init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'pie'</span>))</span><br><span class=\"line\">    .setOption(</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            title: &#123;</span><br><span class=\"line\">                text: city + <span class=\"string\">' from 2000 to 2018'</span>,</span><br><span class=\"line\">                top: <span class=\"string\">'4%'</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            tooltip: &#123;</span><br><span class=\"line\">                trigger: <span class=\"string\">'axis'</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            grid: &#123;</span><br><span class=\"line\">                left: <span class=\"string\">'3%'</span>,</span><br><span class=\"line\">                right: <span class=\"string\">'4%'</span>,</span><br><span class=\"line\">                bottom: <span class=\"string\">'3%'</span>,</span><br><span class=\"line\">                containLabel: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            xAxis: &#123;</span><br><span class=\"line\">                type: <span class=\"string\">'category'</span>,</span><br><span class=\"line\">                boundaryGap: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                axisLabel: &#123;</span><br><span class=\"line\">                    margin: <span class=\"number\">15</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                data: [<span class=\"number\">2000</span>, <span class=\"number\">2001</span>, <span class=\"number\">2002</span>, <span class=\"number\">2003</span>, <span class=\"number\">2004</span>, <span class=\"number\">2005</span>, <span class=\"number\">2006</span>, <span class=\"number\">2007</span>, <span class=\"number\">2008</span>, <span class=\"number\">2009</span>, <span class=\"number\">2010</span>, <span class=\"number\">2011</span>, <span class=\"number\">2012</span>, <span class=\"number\">2013</span>, <span class=\"number\">2014</span>, <span class=\"number\">2015</span>, <span class=\"number\">2016</span>, <span class=\"number\">2017</span>, <span class=\"number\">2018</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            yAxis: &#123;</span><br><span class=\"line\">                type: <span class=\"string\">'value'</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            series: [&#123;</span><br><span class=\"line\">                type: <span class=\"string\">'line'</span>,</span><br><span class=\"line\">                data: data</span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Step-3-Update-the-Chart\"><a href=\"#Step-3-Update-the-Chart\" class=\"headerlink\" title=\"Step 3: Update the Chart\"></a>Step 3: Update the Chart</h5><p>Finally, you need to add a controller to update the chart after input.</p>\n<p>For <strong>ECharts</strong>, all you need to do is to call the above chart functions again. Echarts will update the data <strong>automatically</strong>. </p>\n<p>Here are some example codes,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render_chart</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      echarts</span></span><br><span class=\"line\"><span class=\"comment\">        .init()</span></span><br><span class=\"line\"><span class=\"comment\">        .setOption();</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">d3.select(<span class=\"string\">\"#input\"</span>).on(<span class=\"string\">'change'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    render_chart();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>The End</strong></p>\n<hr>"},{"title":"How to Convert between Array and List in Java","date":"2017-11-19T07:52:54.000Z","description":"Introduction of converting Array and List to each other in Java.","_content":"In **Java**, `Array` and `List` have a lot in common. Sometimes we need to convert them to each other. Let's see how to do that.\n\n***\n\n# How to convert `List` to `Array`?\nSuppose I have a `List<T>` named \"list\",\n```java\n    List<T> list = new ArrayList<T>();\n```\nHere is how to convert list, call the method `toArray(T[] array)` of List.java.\n```java\n    T [] array = list.toArray(new T[list.size()]);\n```\n**Note:** Only generic type can be done in this way, which means you cannot convert into a primitive array, like int, float, boolean, etc. If you want to convert a `List<Integer>` into a `int[]`, you have to do it with iteration yourself.\n***\n\n# How to convert `Array` to `List`?\n\nThere are two ways to convert `Array` to `List`.\n\n- **List with Flexible Length (Recommended)**\n```java\n    List list = new ArrayList(Arrays.asList(array));\n```\nThe above is recommended because it returns an `ArrayList` which has flexible length (you can add extra elements).\n\n\n- **List with Fixed Length**\n```java\n    List list = Arrays.asList(array);\n```\n***\n\n**The End**\n\n***","source":"_posts/ArrayToList.md","raw":"---\ntitle: How to Convert between Array and List in Java\ndate: 2017-11-19 02:52:54\ncategories: Basic Java\ntags: Java\ndescription: Introduction of converting Array and List to each other in Java.\n---\nIn **Java**, `Array` and `List` have a lot in common. Sometimes we need to convert them to each other. Let's see how to do that.\n\n***\n\n# How to convert `List` to `Array`?\nSuppose I have a `List<T>` named \"list\",\n```java\n    List<T> list = new ArrayList<T>();\n```\nHere is how to convert list, call the method `toArray(T[] array)` of List.java.\n```java\n    T [] array = list.toArray(new T[list.size()]);\n```\n**Note:** Only generic type can be done in this way, which means you cannot convert into a primitive array, like int, float, boolean, etc. If you want to convert a `List<Integer>` into a `int[]`, you have to do it with iteration yourself.\n***\n\n# How to convert `Array` to `List`?\n\nThere are two ways to convert `Array` to `List`.\n\n- **List with Flexible Length (Recommended)**\n```java\n    List list = new ArrayList(Arrays.asList(array));\n```\nThe above is recommended because it returns an `ArrayList` which has flexible length (you can add extra elements).\n\n\n- **List with Fixed Length**\n```java\n    List list = Arrays.asList(array);\n```\n***\n\n**The End**\n\n***","slug":"ArrayToList","published":1,"updated":"2020-04-05T01:51:59.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8mityv900025weq2ykhdd7g","content":"<p>In <strong>Java</strong>, <code>Array</code> and <code>List</code> have a lot in common. Sometimes we need to convert them to each other. Let’s see how to do that.</p>\n<hr>\n<h1 id=\"How-to-convert-List-to-Array\"><a href=\"#How-to-convert-List-to-Array\" class=\"headerlink\" title=\"How to convert List to Array?\"></a>How to convert <code>List</code> to <code>Array</code>?</h1><p>Suppose I have a <code>List&lt;T&gt;</code> named “list”,</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;T&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;T&gt;();</span><br></pre></td></tr></table></figure>\n<p>Here is how to convert list, call the method <code>toArray(T[] array)</code> of List.java.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T [] array = list.toArray(<span class=\"keyword\">new</span> T[list.size()]);</span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong> Only generic type can be done in this way, which means you cannot convert into a primitive array, like int, float, boolean, etc. If you want to convert a <code>List&lt;Integer&gt;</code> into a <code>int[]</code>, you have to do it with iteration yourself.</p>\n<hr>\n<h1 id=\"How-to-convert-Array-to-List\"><a href=\"#How-to-convert-Array-to-List\" class=\"headerlink\" title=\"How to convert Array to List?\"></a>How to convert <code>Array</code> to <code>List</code>?</h1><p>There are two ways to convert <code>Array</code> to <code>List</code>.</p>\n<ul>\n<li><strong>List with Flexible Length (Recommended)</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List list = <span class=\"keyword\">new</span> ArrayList(Arrays.asList(array));</span><br></pre></td></tr></table></figure>\nThe above is recommended because it returns an <code>ArrayList</code> which has flexible length (you can add extra elements).</li>\n</ul>\n<ul>\n<li><strong>List with Fixed Length</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List list = Arrays.asList(array);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<p><strong>The End</strong></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<p>In <strong>Java</strong>, <code>Array</code> and <code>List</code> have a lot in common. Sometimes we need to convert them to each other. Let’s see how to do that.</p>\n<hr>\n<h1 id=\"How-to-convert-List-to-Array\"><a href=\"#How-to-convert-List-to-Array\" class=\"headerlink\" title=\"How to convert List to Array?\"></a>How to convert <code>List</code> to <code>Array</code>?</h1><p>Suppose I have a <code>List&lt;T&gt;</code> named “list”,</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;T&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;T&gt;();</span><br></pre></td></tr></table></figure>\n<p>Here is how to convert list, call the method <code>toArray(T[] array)</code> of List.java.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T [] array = list.toArray(<span class=\"keyword\">new</span> T[list.size()]);</span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong> Only generic type can be done in this way, which means you cannot convert into a primitive array, like int, float, boolean, etc. If you want to convert a <code>List&lt;Integer&gt;</code> into a <code>int[]</code>, you have to do it with iteration yourself.</p>\n<hr>\n<h1 id=\"How-to-convert-Array-to-List\"><a href=\"#How-to-convert-Array-to-List\" class=\"headerlink\" title=\"How to convert Array to List?\"></a>How to convert <code>Array</code> to <code>List</code>?</h1><p>There are two ways to convert <code>Array</code> to <code>List</code>.</p>\n<ul>\n<li><strong>List with Flexible Length (Recommended)</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List list = <span class=\"keyword\">new</span> ArrayList(Arrays.asList(array));</span><br></pre></td></tr></table></figure>\nThe above is recommended because it returns an <code>ArrayList</code> which has flexible length (you can add extra elements).</li>\n</ul>\n<ul>\n<li><strong>List with Fixed Length</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List list = Arrays.asList(array);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<p><strong>The End</strong></p>\n<hr>\n"},{"title":"Make an Interactive Map 01 - Colorful World Map","date":"2018-01-19T07:52:54.000Z","description":"Make a interactive world map with countries in different colors based on the data.","_content":"\n#### Prefix\nI am going to make a series of blogs to show you how to make all kinds of **interactive map** on a web page. Before start, you should have some basic knowledge of **HTML** and **JavaScript**.\n\n---\n#### Preview: A Colorful World!\nFirst, let's have a preview of what the map looks like. \n\nThis is a world map that shows the median age of each country from 2015 to 2100 predicted by [United Nations](https://esa.un.org/unpd/wpp/Download/Standard/Population/).\n\n<iframe width=\"820\" height=\"540\" src=\"https://brucehenry.github.io/blog-webpage/interactive-map/01/basic-datamaps.html\">You browser does not support iframe tag, <a href=\"https://brucehenry.github.io/blog-webpage/interactive-map/01/basic-datamaps.html\" target=\"_blank\">click here to visit</a>.</iframe>\n\nAlso, you can find a more advanced example [here](https://brucehenry.github.io/WorldPopulationData/).\n\n---\n#### What tools do you use?\nFor the above map, I use the these libraries,\n- [**DataMaps**](http://datamaps.github.io/): A useful tool to render a `svg` map. Many basic mouse event interactions like changing fill/border color when mouseover and are built in. \n- [**D3**](https://d3js.org/): A very powerful JS library, especially in making data visualization.\n\nOne thing you should know, **DataMaps** is using the version 3 of D3 so that I'd better use the same version in my code.\n\n---\n#### Show me the code! \nSure, you can find all the code at this [Github Repository](https://github.com/BruceHenry/blog-webpage/tree/master/interactive-map/01). \n\nNow let me briefly introduce the steps of making this data visualization. \n \n##### Step 0: Include the JavaScript Libraries.\n```html\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/d3/3.5.3/d3.min.js\"></script>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/topojson/1.6.9/topojson.min.js\"></script>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/datamaps/0.5.8/datamaps.all.js\"></script>\n```\n\n##### Step 1: Load the Data\nI use `d3.json()` to load the data file.\n```javascript\nvar json_data;\nd3.json(\"./MedianAge.json\", function (data) {\n    json_data = data;\n});\n```\n##### Step 2: Process the Data\nThe data for **Datamaps** must be in an specific format like: \n```javascript\n{\n    '3-digit country code':{\n        'numberOfThings': value,\n        'fillColor':color\n    }\n}\n```\n\nAlso, you need provide the **min** and **max** values in order to set the scale of color. Here I use D3 to set the color scale.\n\nThis step actually depends on the format of data you have, so here I just show you an example.\n```javascript\nvar values = [];//The array to store all the values in order to find min and max\n\n//Iterate the data array to retrieve the value of each country\nfor (var country in data_source) {\n    values.push(data_source[country])\n}\n\n//Get min and max values to set the color scale\nvar minValue = Math.min.apply(null, values),\n    maxValue = Math.max.apply(null, values);\n\n//Use d3 to convert number to color\nvar colorScale = d3.scale.linear()\n    .domain([minValue, maxValue])\n    .range([\"#afe0ff\", \"#040066\"]);\n\n//Put color into the data array for each country\nfor (var country in data) {\n    data[country]['fillColor'] = colorScale(data[country]['numberOfThings'])\n}\n```\n\n##### Step 3: Render the Map from the Data\nFirst create a `div` tag in the HTML file. `<div id=\"map\"></div>` \n\nThen call `Datamaps()` function to render the map. You should set the map styles here. \n```javascript\n//Call DataMaps\nnew Datamaps({\n    element: document.getElementById('map'),\n    projection: 'mercator', // big world map\n    fills: {defaultFill: '#F5F5F5'},// countries don't listed in dataset will be painted with this color\n    data: data,\n    geographyConfig: {\n        borderColor: '#d7d7d7',\n        highlightBorderWidth: 2,\n        highlightBorderColor: '#e66d18',\n        popupTemplate: function (geo, data) {// show desired information in tooltip\n            if (!data) // don't show tooltip if country don't present in dataset\n                return;\n            // tooltip content\n            return ['<div class=\"hoverinfo\">',\n                '<strong>', geo.properties.name, '</strong>',\n                '<br>Median Age: <strong>', data.numberOfThings, '</strong>',\n                '</div>'].join('');\n        }\n    }\n});\n```\n\n##### Step 4: Update the Map According to the Input from User \nFirst add a input in HTML. It could be a either `input` or `select` tag. Here is my `input`.\n```html\n <input type=\"range\" min=\"2015\" max=\"2100\" step=\"5\" value=\"2015\" autocomplete=\"off\" id=\"year\"/>\n```\nThen wirte an function to render the map. \n```javascript\nfunction render_map() {\n    //1. Get the new data.\n    //2. Call Datamaps() according to the new data.\n}\n```\n\nAnd finally add a **controller**.\n```javascript\ndocument.getElementById('year').oninput = function () {\n    render_map();//Render a new map when the year is changed. You may need to remove the previous map.\n};\n```\n##### Step 5: Style Your Page\nYou can use **CSS** to make you page prettier. I will skip this step.\n\n***\n**The End**\n\n***","source":"_posts/InteractiveMap_01.md","raw":"---\ntitle: Make an Interactive Map 01 - Colorful World Map\ndate: 2018-01-19 02:52:54\ncategories:\n- Data Visualization\ntags:\n- JavaScript\n- D3\ndescription: Make a interactive world map with countries in different colors based on the data.\n---\n\n#### Prefix\nI am going to make a series of blogs to show you how to make all kinds of **interactive map** on a web page. Before start, you should have some basic knowledge of **HTML** and **JavaScript**.\n\n---\n#### Preview: A Colorful World!\nFirst, let's have a preview of what the map looks like. \n\nThis is a world map that shows the median age of each country from 2015 to 2100 predicted by [United Nations](https://esa.un.org/unpd/wpp/Download/Standard/Population/).\n\n<iframe width=\"820\" height=\"540\" src=\"https://brucehenry.github.io/blog-webpage/interactive-map/01/basic-datamaps.html\">You browser does not support iframe tag, <a href=\"https://brucehenry.github.io/blog-webpage/interactive-map/01/basic-datamaps.html\" target=\"_blank\">click here to visit</a>.</iframe>\n\nAlso, you can find a more advanced example [here](https://brucehenry.github.io/WorldPopulationData/).\n\n---\n#### What tools do you use?\nFor the above map, I use the these libraries,\n- [**DataMaps**](http://datamaps.github.io/): A useful tool to render a `svg` map. Many basic mouse event interactions like changing fill/border color when mouseover and are built in. \n- [**D3**](https://d3js.org/): A very powerful JS library, especially in making data visualization.\n\nOne thing you should know, **DataMaps** is using the version 3 of D3 so that I'd better use the same version in my code.\n\n---\n#### Show me the code! \nSure, you can find all the code at this [Github Repository](https://github.com/BruceHenry/blog-webpage/tree/master/interactive-map/01). \n\nNow let me briefly introduce the steps of making this data visualization. \n \n##### Step 0: Include the JavaScript Libraries.\n```html\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/d3/3.5.3/d3.min.js\"></script>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/topojson/1.6.9/topojson.min.js\"></script>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/datamaps/0.5.8/datamaps.all.js\"></script>\n```\n\n##### Step 1: Load the Data\nI use `d3.json()` to load the data file.\n```javascript\nvar json_data;\nd3.json(\"./MedianAge.json\", function (data) {\n    json_data = data;\n});\n```\n##### Step 2: Process the Data\nThe data for **Datamaps** must be in an specific format like: \n```javascript\n{\n    '3-digit country code':{\n        'numberOfThings': value,\n        'fillColor':color\n    }\n}\n```\n\nAlso, you need provide the **min** and **max** values in order to set the scale of color. Here I use D3 to set the color scale.\n\nThis step actually depends on the format of data you have, so here I just show you an example.\n```javascript\nvar values = [];//The array to store all the values in order to find min and max\n\n//Iterate the data array to retrieve the value of each country\nfor (var country in data_source) {\n    values.push(data_source[country])\n}\n\n//Get min and max values to set the color scale\nvar minValue = Math.min.apply(null, values),\n    maxValue = Math.max.apply(null, values);\n\n//Use d3 to convert number to color\nvar colorScale = d3.scale.linear()\n    .domain([minValue, maxValue])\n    .range([\"#afe0ff\", \"#040066\"]);\n\n//Put color into the data array for each country\nfor (var country in data) {\n    data[country]['fillColor'] = colorScale(data[country]['numberOfThings'])\n}\n```\n\n##### Step 3: Render the Map from the Data\nFirst create a `div` tag in the HTML file. `<div id=\"map\"></div>` \n\nThen call `Datamaps()` function to render the map. You should set the map styles here. \n```javascript\n//Call DataMaps\nnew Datamaps({\n    element: document.getElementById('map'),\n    projection: 'mercator', // big world map\n    fills: {defaultFill: '#F5F5F5'},// countries don't listed in dataset will be painted with this color\n    data: data,\n    geographyConfig: {\n        borderColor: '#d7d7d7',\n        highlightBorderWidth: 2,\n        highlightBorderColor: '#e66d18',\n        popupTemplate: function (geo, data) {// show desired information in tooltip\n            if (!data) // don't show tooltip if country don't present in dataset\n                return;\n            // tooltip content\n            return ['<div class=\"hoverinfo\">',\n                '<strong>', geo.properties.name, '</strong>',\n                '<br>Median Age: <strong>', data.numberOfThings, '</strong>',\n                '</div>'].join('');\n        }\n    }\n});\n```\n\n##### Step 4: Update the Map According to the Input from User \nFirst add a input in HTML. It could be a either `input` or `select` tag. Here is my `input`.\n```html\n <input type=\"range\" min=\"2015\" max=\"2100\" step=\"5\" value=\"2015\" autocomplete=\"off\" id=\"year\"/>\n```\nThen wirte an function to render the map. \n```javascript\nfunction render_map() {\n    //1. Get the new data.\n    //2. Call Datamaps() according to the new data.\n}\n```\n\nAnd finally add a **controller**.\n```javascript\ndocument.getElementById('year').oninput = function () {\n    render_map();//Render a new map when the year is changed. You may need to remove the previous map.\n};\n```\n##### Step 5: Style Your Page\nYou can use **CSS** to make you page prettier. I will skip this step.\n\n***\n**The End**\n\n***","slug":"InteractiveMap_01","published":1,"updated":"2020-04-05T02:33:23.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8mityvd00065weq9h2faiz1","content":"<h4 id=\"Prefix\"><a href=\"#Prefix\" class=\"headerlink\" title=\"Prefix\"></a>Prefix</h4><p>I am going to make a series of blogs to show you how to make all kinds of <strong>interactive map</strong> on a web page. Before start, you should have some basic knowledge of <strong>HTML</strong> and <strong>JavaScript</strong>.</p>\n<hr>\n<h4 id=\"Preview-A-Colorful-World\"><a href=\"#Preview-A-Colorful-World\" class=\"headerlink\" title=\"Preview: A Colorful World!\"></a>Preview: A Colorful World!</h4><p>First, let’s have a preview of what the map looks like. </p>\n<p>This is a world map that shows the median age of each country from 2015 to 2100 predicted by <a href=\"https://esa.un.org/unpd/wpp/Download/Standard/Population/\" target=\"_blank\" rel=\"noopener\">United Nations</a>.</p>\n<iframe width=\"820\" height=\"540\" src=\"https://brucehenry.github.io/blog-webpage/interactive-map/01/basic-datamaps.html\">You browser does not support iframe tag, <a href=\"https://brucehenry.github.io/blog-webpage/interactive-map/01/basic-datamaps.html\" target=\"_blank\">click here to visit</a>.</iframe>\n\n<p>Also, you can find a more advanced example <a href=\"https://brucehenry.github.io/WorldPopulationData/\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<hr>\n<h4 id=\"What-tools-do-you-use\"><a href=\"#What-tools-do-you-use\" class=\"headerlink\" title=\"What tools do you use?\"></a>What tools do you use?</h4><p>For the above map, I use the these libraries,</p>\n<ul>\n<li><a href=\"http://datamaps.github.io/\" target=\"_blank\" rel=\"noopener\"><strong>DataMaps</strong></a>: A useful tool to render a <code>svg</code> map. Many basic mouse event interactions like changing fill/border color when mouseover and are built in. </li>\n<li><a href=\"https://d3js.org/\" target=\"_blank\" rel=\"noopener\"><strong>D3</strong></a>: A very powerful JS library, especially in making data visualization.</li>\n</ul>\n<p>One thing you should know, <strong>DataMaps</strong> is using the version 3 of D3 so that I’d better use the same version in my code.</p>\n<hr>\n<h4 id=\"Show-me-the-code\"><a href=\"#Show-me-the-code\" class=\"headerlink\" title=\"Show me the code!\"></a>Show me the code!</h4><p>Sure, you can find all the code at this <a href=\"https://github.com/BruceHenry/blog-webpage/tree/master/interactive-map/01\" target=\"_blank\" rel=\"noopener\">Github Repository</a>. </p>\n<p>Now let me briefly introduce the steps of making this data visualization. </p>\n<h5 id=\"Step-0-Include-the-JavaScript-Libraries\"><a href=\"#Step-0-Include-the-JavaScript-Libraries\" class=\"headerlink\" title=\"Step 0: Include the JavaScript Libraries.\"></a>Step 0: Include the JavaScript Libraries.</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//cdnjs.cloudflare.com/ajax/libs/d3/3.5.3/d3.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//cdnjs.cloudflare.com/ajax/libs/topojson/1.6.9/topojson.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//cdnjs.cloudflare.com/ajax/libs/datamaps/0.5.8/datamaps.all.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Step-1-Load-the-Data\"><a href=\"#Step-1-Load-the-Data\" class=\"headerlink\" title=\"Step 1: Load the Data\"></a>Step 1: Load the Data</h5><p>I use <code>d3.json()</code> to load the data file.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> json_data;</span><br><span class=\"line\">d3.json(<span class=\"string\">\"./MedianAge.json\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    json_data = data;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"Step-2-Process-the-Data\"><a href=\"#Step-2-Process-the-Data\" class=\"headerlink\" title=\"Step 2: Process the Data\"></a>Step 2: Process the Data</h5><p>The data for <strong>Datamaps</strong> must be in an specific format like: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">'3-digit country code'</span>:&#123;</span><br><span class=\"line\">        <span class=\"string\">'numberOfThings'</span>: value,</span><br><span class=\"line\">        <span class=\"string\">'fillColor'</span>:color</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Also, you need provide the <strong>min</strong> and <strong>max</strong> values in order to set the scale of color. Here I use D3 to set the color scale.</p>\n<p>This step actually depends on the format of data you have, so here I just show you an example.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [];<span class=\"comment\">//The array to store all the values in order to find min and max</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Iterate the data array to retrieve the value of each country</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> country <span class=\"keyword\">in</span> data_source) &#123;</span><br><span class=\"line\">    values.push(data_source[country])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Get min and max values to set the color scale</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minValue = <span class=\"built_in\">Math</span>.min.apply(<span class=\"literal\">null</span>, values),</span><br><span class=\"line\">    maxValue = <span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, values);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Use d3 to convert number to color</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> colorScale = d3.scale.linear()</span><br><span class=\"line\">    .domain([minValue, maxValue])</span><br><span class=\"line\">    .range([<span class=\"string\">\"#afe0ff\"</span>, <span class=\"string\">\"#040066\"</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Put color into the data array for each country</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> country <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">    data[country][<span class=\"string\">'fillColor'</span>] = colorScale(data[country][<span class=\"string\">'numberOfThings'</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Step-3-Render-the-Map-from-the-Data\"><a href=\"#Step-3-Render-the-Map-from-the-Data\" class=\"headerlink\" title=\"Step 3: Render the Map from the Data\"></a>Step 3: Render the Map from the Data</h5><p>First create a <code>div</code> tag in the HTML file. <code>&lt;div id=&quot;map&quot;&gt;&lt;/div&gt;</code> </p>\n<p>Then call <code>Datamaps()</code> function to render the map. You should set the map styles here. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Call DataMaps</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Datamaps(&#123;</span><br><span class=\"line\">    element: <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'map'</span>),</span><br><span class=\"line\">    projection: <span class=\"string\">'mercator'</span>, <span class=\"comment\">// big world map</span></span><br><span class=\"line\">    fills: &#123;<span class=\"attr\">defaultFill</span>: <span class=\"string\">'#F5F5F5'</span>&#125;,<span class=\"comment\">// countries don't listed in dataset will be painted with this color</span></span><br><span class=\"line\">    data: data,</span><br><span class=\"line\">    geographyConfig: &#123;</span><br><span class=\"line\">        borderColor: <span class=\"string\">'#d7d7d7'</span>,</span><br><span class=\"line\">        highlightBorderWidth: <span class=\"number\">2</span>,</span><br><span class=\"line\">        highlightBorderColor: <span class=\"string\">'#e66d18'</span>,</span><br><span class=\"line\">        popupTemplate: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">geo, data</span>) </span>&#123;<span class=\"comment\">// show desired information in tooltip</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!data) <span class=\"comment\">// don't show tooltip if country don't present in dataset</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"comment\">// tooltip content</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"string\">'&lt;div class=\"hoverinfo\"&gt;'</span>,</span><br><span class=\"line\">                <span class=\"string\">'&lt;strong&gt;'</span>, geo.properties.name, <span class=\"string\">'&lt;/strong&gt;'</span>,</span><br><span class=\"line\">                <span class=\"string\">'&lt;br&gt;Median Age: &lt;strong&gt;'</span>, data.numberOfThings, <span class=\"string\">'&lt;/strong&gt;'</span>,</span><br><span class=\"line\">                <span class=\"string\">'&lt;/div&gt;'</span>].join(<span class=\"string\">''</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Step-4-Update-the-Map-According-to-the-Input-from-User\"><a href=\"#Step-4-Update-the-Map-According-to-the-Input-from-User\" class=\"headerlink\" title=\"Step 4: Update the Map According to the Input from User\"></a>Step 4: Update the Map According to the Input from User</h5><p>First add a input in HTML. It could be a either <code>input</code> or <code>select</code> tag. Here is my <code>input</code>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"range\"</span> <span class=\"attr\">min</span>=<span class=\"string\">\"2015\"</span> <span class=\"attr\">max</span>=<span class=\"string\">\"2100\"</span> <span class=\"attr\">step</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2015\"</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">\"off\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"year\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Then wirte an function to render the map. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render_map</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1. Get the new data.</span></span><br><span class=\"line\">    <span class=\"comment\">//2. Call Datamaps() according to the new data.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And finally add a <strong>controller</strong>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'year'</span>).oninput = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    render_map();<span class=\"comment\">//Render a new map when the year is changed. You may need to remove the previous map.</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Step-5-Style-Your-Page\"><a href=\"#Step-5-Style-Your-Page\" class=\"headerlink\" title=\"Step 5: Style Your Page\"></a>Step 5: Style Your Page</h5><p>You can use <strong>CSS</strong> to make you page prettier. I will skip this step.</p>\n<hr>\n<p><strong>The End</strong></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Prefix\"><a href=\"#Prefix\" class=\"headerlink\" title=\"Prefix\"></a>Prefix</h4><p>I am going to make a series of blogs to show you how to make all kinds of <strong>interactive map</strong> on a web page. Before start, you should have some basic knowledge of <strong>HTML</strong> and <strong>JavaScript</strong>.</p>\n<hr>\n<h4 id=\"Preview-A-Colorful-World\"><a href=\"#Preview-A-Colorful-World\" class=\"headerlink\" title=\"Preview: A Colorful World!\"></a>Preview: A Colorful World!</h4><p>First, let’s have a preview of what the map looks like. </p>\n<p>This is a world map that shows the median age of each country from 2015 to 2100 predicted by <a href=\"https://esa.un.org/unpd/wpp/Download/Standard/Population/\" target=\"_blank\" rel=\"noopener\">United Nations</a>.</p>\n<iframe width=\"820\" height=\"540\" src=\"https://brucehenry.github.io/blog-webpage/interactive-map/01/basic-datamaps.html\">You browser does not support iframe tag, <a href=\"https://brucehenry.github.io/blog-webpage/interactive-map/01/basic-datamaps.html\" target=\"_blank\">click here to visit</a>.</iframe>\n\n<p>Also, you can find a more advanced example <a href=\"https://brucehenry.github.io/WorldPopulationData/\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<hr>\n<h4 id=\"What-tools-do-you-use\"><a href=\"#What-tools-do-you-use\" class=\"headerlink\" title=\"What tools do you use?\"></a>What tools do you use?</h4><p>For the above map, I use the these libraries,</p>\n<ul>\n<li><a href=\"http://datamaps.github.io/\" target=\"_blank\" rel=\"noopener\"><strong>DataMaps</strong></a>: A useful tool to render a <code>svg</code> map. Many basic mouse event interactions like changing fill/border color when mouseover and are built in. </li>\n<li><a href=\"https://d3js.org/\" target=\"_blank\" rel=\"noopener\"><strong>D3</strong></a>: A very powerful JS library, especially in making data visualization.</li>\n</ul>\n<p>One thing you should know, <strong>DataMaps</strong> is using the version 3 of D3 so that I’d better use the same version in my code.</p>\n<hr>\n<h4 id=\"Show-me-the-code\"><a href=\"#Show-me-the-code\" class=\"headerlink\" title=\"Show me the code!\"></a>Show me the code!</h4><p>Sure, you can find all the code at this <a href=\"https://github.com/BruceHenry/blog-webpage/tree/master/interactive-map/01\" target=\"_blank\" rel=\"noopener\">Github Repository</a>. </p>\n<p>Now let me briefly introduce the steps of making this data visualization. </p>\n<h5 id=\"Step-0-Include-the-JavaScript-Libraries\"><a href=\"#Step-0-Include-the-JavaScript-Libraries\" class=\"headerlink\" title=\"Step 0: Include the JavaScript Libraries.\"></a>Step 0: Include the JavaScript Libraries.</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//cdnjs.cloudflare.com/ajax/libs/d3/3.5.3/d3.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//cdnjs.cloudflare.com/ajax/libs/topojson/1.6.9/topojson.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//cdnjs.cloudflare.com/ajax/libs/datamaps/0.5.8/datamaps.all.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Step-1-Load-the-Data\"><a href=\"#Step-1-Load-the-Data\" class=\"headerlink\" title=\"Step 1: Load the Data\"></a>Step 1: Load the Data</h5><p>I use <code>d3.json()</code> to load the data file.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> json_data;</span><br><span class=\"line\">d3.json(<span class=\"string\">\"./MedianAge.json\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    json_data = data;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"Step-2-Process-the-Data\"><a href=\"#Step-2-Process-the-Data\" class=\"headerlink\" title=\"Step 2: Process the Data\"></a>Step 2: Process the Data</h5><p>The data for <strong>Datamaps</strong> must be in an specific format like: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">'3-digit country code'</span>:&#123;</span><br><span class=\"line\">        <span class=\"string\">'numberOfThings'</span>: value,</span><br><span class=\"line\">        <span class=\"string\">'fillColor'</span>:color</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Also, you need provide the <strong>min</strong> and <strong>max</strong> values in order to set the scale of color. Here I use D3 to set the color scale.</p>\n<p>This step actually depends on the format of data you have, so here I just show you an example.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [];<span class=\"comment\">//The array to store all the values in order to find min and max</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Iterate the data array to retrieve the value of each country</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> country <span class=\"keyword\">in</span> data_source) &#123;</span><br><span class=\"line\">    values.push(data_source[country])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Get min and max values to set the color scale</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minValue = <span class=\"built_in\">Math</span>.min.apply(<span class=\"literal\">null</span>, values),</span><br><span class=\"line\">    maxValue = <span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, values);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Use d3 to convert number to color</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> colorScale = d3.scale.linear()</span><br><span class=\"line\">    .domain([minValue, maxValue])</span><br><span class=\"line\">    .range([<span class=\"string\">\"#afe0ff\"</span>, <span class=\"string\">\"#040066\"</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Put color into the data array for each country</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> country <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">    data[country][<span class=\"string\">'fillColor'</span>] = colorScale(data[country][<span class=\"string\">'numberOfThings'</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Step-3-Render-the-Map-from-the-Data\"><a href=\"#Step-3-Render-the-Map-from-the-Data\" class=\"headerlink\" title=\"Step 3: Render the Map from the Data\"></a>Step 3: Render the Map from the Data</h5><p>First create a <code>div</code> tag in the HTML file. <code>&lt;div id=&quot;map&quot;&gt;&lt;/div&gt;</code> </p>\n<p>Then call <code>Datamaps()</code> function to render the map. You should set the map styles here. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Call DataMaps</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Datamaps(&#123;</span><br><span class=\"line\">    element: <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'map'</span>),</span><br><span class=\"line\">    projection: <span class=\"string\">'mercator'</span>, <span class=\"comment\">// big world map</span></span><br><span class=\"line\">    fills: &#123;<span class=\"attr\">defaultFill</span>: <span class=\"string\">'#F5F5F5'</span>&#125;,<span class=\"comment\">// countries don't listed in dataset will be painted with this color</span></span><br><span class=\"line\">    data: data,</span><br><span class=\"line\">    geographyConfig: &#123;</span><br><span class=\"line\">        borderColor: <span class=\"string\">'#d7d7d7'</span>,</span><br><span class=\"line\">        highlightBorderWidth: <span class=\"number\">2</span>,</span><br><span class=\"line\">        highlightBorderColor: <span class=\"string\">'#e66d18'</span>,</span><br><span class=\"line\">        popupTemplate: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">geo, data</span>) </span>&#123;<span class=\"comment\">// show desired information in tooltip</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!data) <span class=\"comment\">// don't show tooltip if country don't present in dataset</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"comment\">// tooltip content</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"string\">'&lt;div class=\"hoverinfo\"&gt;'</span>,</span><br><span class=\"line\">                <span class=\"string\">'&lt;strong&gt;'</span>, geo.properties.name, <span class=\"string\">'&lt;/strong&gt;'</span>,</span><br><span class=\"line\">                <span class=\"string\">'&lt;br&gt;Median Age: &lt;strong&gt;'</span>, data.numberOfThings, <span class=\"string\">'&lt;/strong&gt;'</span>,</span><br><span class=\"line\">                <span class=\"string\">'&lt;/div&gt;'</span>].join(<span class=\"string\">''</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Step-4-Update-the-Map-According-to-the-Input-from-User\"><a href=\"#Step-4-Update-the-Map-According-to-the-Input-from-User\" class=\"headerlink\" title=\"Step 4: Update the Map According to the Input from User\"></a>Step 4: Update the Map According to the Input from User</h5><p>First add a input in HTML. It could be a either <code>input</code> or <code>select</code> tag. Here is my <code>input</code>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"range\"</span> <span class=\"attr\">min</span>=<span class=\"string\">\"2015\"</span> <span class=\"attr\">max</span>=<span class=\"string\">\"2100\"</span> <span class=\"attr\">step</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2015\"</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">\"off\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"year\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Then wirte an function to render the map. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render_map</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1. Get the new data.</span></span><br><span class=\"line\">    <span class=\"comment\">//2. Call Datamaps() according to the new data.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And finally add a <strong>controller</strong>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'year'</span>).oninput = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    render_map();<span class=\"comment\">//Render a new map when the year is changed. You may need to remove the previous map.</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Step-5-Style-Your-Page\"><a href=\"#Step-5-Style-Your-Page\" class=\"headerlink\" title=\"Step 5: Style Your Page\"></a>Step 5: Style Your Page</h5><p>You can use <strong>CSS</strong> to make you page prettier. I will skip this step.</p>\n<hr>\n<p><strong>The End</strong></p>\n<hr>\n"},{"title":"Make an Interactive Map 02 - Lines in the Map","date":"2018-01-31T07:52:54.000Z","description":"Introduction to how to draw lines in a map using D3.js","_content":"\n#### Preview: Lines in the Map\nThis map shows the connections among different locations.\n\n<iframe width=\"820\" height=\"520\" src=\"https://brucehenry.github.io/blog-webpage/interactive-map/02/advanced_map.html\">You browser does not support iframe tag, <a href=\"https://brucehenry.github.io/blog-webpage/interactive-map/02/advanced_map.html\" target=\"_blank\">click here to visit</a>.</iframe>\n\n---\n#### What tools do you use?\nI still use the same tools as the previous blog ([Make an Interactive Map 01](https://brucehenry.github.io/blog/public/2018/01/19/InteractiveMap_01/)): [DataMaps](http://datamaps.github.io/) and [D3](https://d3js.org/).\n\nHowever, this time functions in **D3** is largely used to manipulate `svg` elements based on the map.\n\n---\n#### Show me the code! \nYou can find the code at this [Github Repository](https://github.com/BruceHenry/blog-webpage/tree/master/interactive-map/02). \n\nLet me briefly introduce the steps of making this data visualization. I will skip the **rendering map** part that has already covered in my previous blog.\n\n##### Step 1: Set Projection with `d3.geo`\n**Projection** means the center of map, so we need it to convert real-world coordinates(longitude and latitude) into locations in our map. It should be **updated** every time user drag or zoom in/out.\n\nProjection contains **center**, **scale**, and **translate**.\n- **Center** is an array of longitude and latitude.\n- **Scale** is the height of the map, which means the relative size in the map.\n- **Translate** is to set the coordinate origin to be the center of map instead of top-left corner, so the values should be half of width and height.\n\n```javascript\n//Get width and height of the outer <div> to set projection\nvar map_div = d3.select('#map').node().getBoundingClientRect();\nvar width = map_div.width;\nvar height = map_div.height;\n\n//This value is the initial scale of map. \nvar default_scale = 500;\n\nvar projection = d3.geo.equirectangular()\n    .center([-98, 38])//[longitude, latitude], the approximate center of USA is [-98, 38].\n    .scale(default_scale)//Initial scale\n    .translate([width / 2, height / 2]);\n```\n##### Step 2: Use D3 to Draw SVG Shapes\nThis is such a powerful part of D3. You can manipulate SVG elements easily with D3. Let's see how to do that.\n\nFirst you need to create a `<svg></svg>` element and have an **array** of data.\n\nThen set the attributes using D3. Use `data(data_source).enter()` to set the data, `append(tag)` to add element, `attr()` to set an attribute, and `style()` to set styles. Also, use `on()` to add listener event for interaction.\n\nFor circles,\n```javascript\n//Append all circles into a <g> tag in order to manipulate them easily.\nvar circles = d3.select('svg')\n    .append('g')\n    .attr('id', 'circles')\n    .selectAll('circle');\n\n//Set attributes and styles of circles based on the data\ncircles.data(data)\n    .enter()\n    .append('circle')\n    .attr('fill', '#ffb043')\n    .attr('r', 4)\n    .attr('cx', function (d) {\n        return projection(d.location)[0];\n    })\n    .attr('cy', function (d) {\n        return projection(d.location)[1];\n    })\n    .on('click', function (d) {\n        //Click Event\n    })\n```\n\nFor lines, to add animation use ` .transition().duration(millisecond)`\n```javascript\nvar colorScale = d3.scale.category20();//To make the lines be in different colors.\n\n//Append all lines into a <g> tag in order to manipulate them easily.\nvar lines = d3.select('svg')\n        .append('g')\n        .attr('id', 'lines')\n        .selectAll('line');\n\n//Set attributes and styles of lines based on the data\nlines.data(data)\n    .enter()\n    .append('line')\n    .attr('x1', projection(location_data[city])[0])\n    .attr('y1', projection(location_data[city])[1])\n    .attr('x2', projection(location_data[city])[0])\n    .attr('y2', projection(location_data[city])[1])\n    .style('stroke-width', '3px')\n    .style('stroke', function () {\n        return colorScale(Math.random());\n    })\n    .style('stroke-linecap', 'round')\n    .transition()\n    .duration(animation_length)\n    .attr('x2', function (d) {\n        return projection(location_data[d])[0];\n    })\n    .attr('y2', function (d) {\n        return projection(location_data[d])[1];\n    })\n```\n**Putting the above code into functions will make it easier when updating.**\n\n##### Step 3:  Add Controller and Event-Listenner\nThe most important one is the one for the map. \n```javascript\nd3.select('#map').call(\n    d3.behavior.zoom()\n        .on('zoom', function () {\n            var scale = d3.event.scale;\n            //Update projection (projection will be changed after zooming or dragging)\n            projection = d3.geo.equirectangular()\n                .center([-98, 38])\n                .scale(default_scale * scale)\n                .translate([width / 2 * scale + d3.event.translate[0], height / 2 * scale + d3.event.translate[1]]);\n\n            //Your functions toupdate map and svg shapes...\n        })\n);\n```\nAlso controllers for the other inputs.\n***\n**The End**\n\n***","source":"_posts/InteractiveMap_02.md","raw":"---\ntitle: Make an Interactive Map 02 - Lines in the Map\ndate: 2018-01-31 02:52:54\ncategories:\n- Data Visualization\ntags:\n- JavaScript\n- D3\ndescription: Introduction to how to draw lines in a map using D3.js\n---\n\n#### Preview: Lines in the Map\nThis map shows the connections among different locations.\n\n<iframe width=\"820\" height=\"520\" src=\"https://brucehenry.github.io/blog-webpage/interactive-map/02/advanced_map.html\">You browser does not support iframe tag, <a href=\"https://brucehenry.github.io/blog-webpage/interactive-map/02/advanced_map.html\" target=\"_blank\">click here to visit</a>.</iframe>\n\n---\n#### What tools do you use?\nI still use the same tools as the previous blog ([Make an Interactive Map 01](https://brucehenry.github.io/blog/public/2018/01/19/InteractiveMap_01/)): [DataMaps](http://datamaps.github.io/) and [D3](https://d3js.org/).\n\nHowever, this time functions in **D3** is largely used to manipulate `svg` elements based on the map.\n\n---\n#### Show me the code! \nYou can find the code at this [Github Repository](https://github.com/BruceHenry/blog-webpage/tree/master/interactive-map/02). \n\nLet me briefly introduce the steps of making this data visualization. I will skip the **rendering map** part that has already covered in my previous blog.\n\n##### Step 1: Set Projection with `d3.geo`\n**Projection** means the center of map, so we need it to convert real-world coordinates(longitude and latitude) into locations in our map. It should be **updated** every time user drag or zoom in/out.\n\nProjection contains **center**, **scale**, and **translate**.\n- **Center** is an array of longitude and latitude.\n- **Scale** is the height of the map, which means the relative size in the map.\n- **Translate** is to set the coordinate origin to be the center of map instead of top-left corner, so the values should be half of width and height.\n\n```javascript\n//Get width and height of the outer <div> to set projection\nvar map_div = d3.select('#map').node().getBoundingClientRect();\nvar width = map_div.width;\nvar height = map_div.height;\n\n//This value is the initial scale of map. \nvar default_scale = 500;\n\nvar projection = d3.geo.equirectangular()\n    .center([-98, 38])//[longitude, latitude], the approximate center of USA is [-98, 38].\n    .scale(default_scale)//Initial scale\n    .translate([width / 2, height / 2]);\n```\n##### Step 2: Use D3 to Draw SVG Shapes\nThis is such a powerful part of D3. You can manipulate SVG elements easily with D3. Let's see how to do that.\n\nFirst you need to create a `<svg></svg>` element and have an **array** of data.\n\nThen set the attributes using D3. Use `data(data_source).enter()` to set the data, `append(tag)` to add element, `attr()` to set an attribute, and `style()` to set styles. Also, use `on()` to add listener event for interaction.\n\nFor circles,\n```javascript\n//Append all circles into a <g> tag in order to manipulate them easily.\nvar circles = d3.select('svg')\n    .append('g')\n    .attr('id', 'circles')\n    .selectAll('circle');\n\n//Set attributes and styles of circles based on the data\ncircles.data(data)\n    .enter()\n    .append('circle')\n    .attr('fill', '#ffb043')\n    .attr('r', 4)\n    .attr('cx', function (d) {\n        return projection(d.location)[0];\n    })\n    .attr('cy', function (d) {\n        return projection(d.location)[1];\n    })\n    .on('click', function (d) {\n        //Click Event\n    })\n```\n\nFor lines, to add animation use ` .transition().duration(millisecond)`\n```javascript\nvar colorScale = d3.scale.category20();//To make the lines be in different colors.\n\n//Append all lines into a <g> tag in order to manipulate them easily.\nvar lines = d3.select('svg')\n        .append('g')\n        .attr('id', 'lines')\n        .selectAll('line');\n\n//Set attributes and styles of lines based on the data\nlines.data(data)\n    .enter()\n    .append('line')\n    .attr('x1', projection(location_data[city])[0])\n    .attr('y1', projection(location_data[city])[1])\n    .attr('x2', projection(location_data[city])[0])\n    .attr('y2', projection(location_data[city])[1])\n    .style('stroke-width', '3px')\n    .style('stroke', function () {\n        return colorScale(Math.random());\n    })\n    .style('stroke-linecap', 'round')\n    .transition()\n    .duration(animation_length)\n    .attr('x2', function (d) {\n        return projection(location_data[d])[0];\n    })\n    .attr('y2', function (d) {\n        return projection(location_data[d])[1];\n    })\n```\n**Putting the above code into functions will make it easier when updating.**\n\n##### Step 3:  Add Controller and Event-Listenner\nThe most important one is the one for the map. \n```javascript\nd3.select('#map').call(\n    d3.behavior.zoom()\n        .on('zoom', function () {\n            var scale = d3.event.scale;\n            //Update projection (projection will be changed after zooming or dragging)\n            projection = d3.geo.equirectangular()\n                .center([-98, 38])\n                .scale(default_scale * scale)\n                .translate([width / 2 * scale + d3.event.translate[0], height / 2 * scale + d3.event.translate[1]]);\n\n            //Your functions toupdate map and svg shapes...\n        })\n);\n```\nAlso controllers for the other inputs.\n***\n**The End**\n\n***","slug":"InteractiveMap_02","published":1,"updated":"2020-04-05T02:33:11.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8mityve00085weq72bue9l5","content":"<h4 id=\"Preview-Lines-in-the-Map\"><a href=\"#Preview-Lines-in-the-Map\" class=\"headerlink\" title=\"Preview: Lines in the Map\"></a>Preview: Lines in the Map</h4><p>This map shows the connections among different locations.</p>\n<iframe width=\"820\" height=\"520\" src=\"https://brucehenry.github.io/blog-webpage/interactive-map/02/advanced_map.html\">You browser does not support iframe tag, <a href=\"https://brucehenry.github.io/blog-webpage/interactive-map/02/advanced_map.html\" target=\"_blank\">click here to visit</a>.</iframe>\n\n<hr>\n<h4 id=\"What-tools-do-you-use\"><a href=\"#What-tools-do-you-use\" class=\"headerlink\" title=\"What tools do you use?\"></a>What tools do you use?</h4><p>I still use the same tools as the previous blog (<a href=\"https://brucehenry.github.io/blog/public/2018/01/19/InteractiveMap_01/\" target=\"_blank\" rel=\"noopener\">Make an Interactive Map 01</a>): <a href=\"http://datamaps.github.io/\" target=\"_blank\" rel=\"noopener\">DataMaps</a> and <a href=\"https://d3js.org/\" target=\"_blank\" rel=\"noopener\">D3</a>.</p>\n<p>However, this time functions in <strong>D3</strong> is largely used to manipulate <code>svg</code> elements based on the map.</p>\n<hr>\n<h4 id=\"Show-me-the-code\"><a href=\"#Show-me-the-code\" class=\"headerlink\" title=\"Show me the code!\"></a>Show me the code!</h4><p>You can find the code at this <a href=\"https://github.com/BruceHenry/blog-webpage/tree/master/interactive-map/02\" target=\"_blank\" rel=\"noopener\">Github Repository</a>. </p>\n<p>Let me briefly introduce the steps of making this data visualization. I will skip the <strong>rendering map</strong> part that has already covered in my previous blog.</p>\n<h5 id=\"Step-1-Set-Projection-with-d3-geo\"><a href=\"#Step-1-Set-Projection-with-d3-geo\" class=\"headerlink\" title=\"Step 1: Set Projection with d3.geo\"></a>Step 1: Set Projection with <code>d3.geo</code></h5><p><strong>Projection</strong> means the center of map, so we need it to convert real-world coordinates(longitude and latitude) into locations in our map. It should be <strong>updated</strong> every time user drag or zoom in/out.</p>\n<p>Projection contains <strong>center</strong>, <strong>scale</strong>, and <strong>translate</strong>.</p>\n<ul>\n<li><strong>Center</strong> is an array of longitude and latitude.</li>\n<li><strong>Scale</strong> is the height of the map, which means the relative size in the map.</li>\n<li><strong>Translate</strong> is to set the coordinate origin to be the center of map instead of top-left corner, so the values should be half of width and height.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Get width and height of the outer &lt;div&gt; to set projection</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> map_div = d3.select(<span class=\"string\">'#map'</span>).node().getBoundingClientRect();</span><br><span class=\"line\"><span class=\"keyword\">var</span> width = map_div.width;</span><br><span class=\"line\"><span class=\"keyword\">var</span> height = map_div.height;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//This value is the initial scale of map. </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> default_scale = <span class=\"number\">500</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> projection = d3.geo.equirectangular()</span><br><span class=\"line\">    .center([<span class=\"number\">-98</span>, <span class=\"number\">38</span>])<span class=\"comment\">//[longitude, latitude], the approximate center of USA is [-98, 38].</span></span><br><span class=\"line\">    .scale(default_scale)<span class=\"comment\">//Initial scale</span></span><br><span class=\"line\">    .translate([width / <span class=\"number\">2</span>, height / <span class=\"number\">2</span>]);</span><br></pre></td></tr></table></figure>\n<h5 id=\"Step-2-Use-D3-to-Draw-SVG-Shapes\"><a href=\"#Step-2-Use-D3-to-Draw-SVG-Shapes\" class=\"headerlink\" title=\"Step 2: Use D3 to Draw SVG Shapes\"></a>Step 2: Use D3 to Draw SVG Shapes</h5><p>This is such a powerful part of D3. You can manipulate SVG elements easily with D3. Let’s see how to do that.</p>\n<p>First you need to create a <code>&lt;svg&gt;&lt;/svg&gt;</code> element and have an <strong>array</strong> of data.</p>\n<p>Then set the attributes using D3. Use <code>data(data_source).enter()</code> to set the data, <code>append(tag)</code> to add element, <code>attr()</code> to set an attribute, and <code>style()</code> to set styles. Also, use <code>on()</code> to add listener event for interaction.</p>\n<p>For circles,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Append all circles into a &lt;g&gt; tag in order to manipulate them easily.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> circles = d3.select(<span class=\"string\">'svg'</span>)</span><br><span class=\"line\">    .append(<span class=\"string\">'g'</span>)</span><br><span class=\"line\">    .attr(<span class=\"string\">'id'</span>, <span class=\"string\">'circles'</span>)</span><br><span class=\"line\">    .selectAll(<span class=\"string\">'circle'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Set attributes and styles of circles based on the data</span></span><br><span class=\"line\">circles.data(data)</span><br><span class=\"line\">    .enter()</span><br><span class=\"line\">    .append(<span class=\"string\">'circle'</span>)</span><br><span class=\"line\">    .attr(<span class=\"string\">'fill'</span>, <span class=\"string\">'#ffb043'</span>)</span><br><span class=\"line\">    .attr(<span class=\"string\">'r'</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">    .attr(<span class=\"string\">'cx'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">d</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> projection(d.location)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .attr(<span class=\"string\">'cy'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">d</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> projection(d.location)[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">d</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//Click Event</span></span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>For lines, to add animation use <code>.transition().duration(millisecond)</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colorScale = d3.scale.category20();<span class=\"comment\">//To make the lines be in different colors.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Append all lines into a &lt;g&gt; tag in order to manipulate them easily.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lines = d3.select(<span class=\"string\">'svg'</span>)</span><br><span class=\"line\">        .append(<span class=\"string\">'g'</span>)</span><br><span class=\"line\">        .attr(<span class=\"string\">'id'</span>, <span class=\"string\">'lines'</span>)</span><br><span class=\"line\">        .selectAll(<span class=\"string\">'line'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Set attributes and styles of lines based on the data</span></span><br><span class=\"line\">lines.data(data)</span><br><span class=\"line\">    .enter()</span><br><span class=\"line\">    .append(<span class=\"string\">'line'</span>)</span><br><span class=\"line\">    .attr(<span class=\"string\">'x1'</span>, projection(location_data[city])[<span class=\"number\">0</span>])</span><br><span class=\"line\">    .attr(<span class=\"string\">'y1'</span>, projection(location_data[city])[<span class=\"number\">1</span>])</span><br><span class=\"line\">    .attr(<span class=\"string\">'x2'</span>, projection(location_data[city])[<span class=\"number\">0</span>])</span><br><span class=\"line\">    .attr(<span class=\"string\">'y2'</span>, projection(location_data[city])[<span class=\"number\">1</span>])</span><br><span class=\"line\">    .style(<span class=\"string\">'stroke-width'</span>, <span class=\"string\">'3px'</span>)</span><br><span class=\"line\">    .style(<span class=\"string\">'stroke'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> colorScale(<span class=\"built_in\">Math</span>.random());</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .style(<span class=\"string\">'stroke-linecap'</span>, <span class=\"string\">'round'</span>)</span><br><span class=\"line\">    .transition()</span><br><span class=\"line\">    .duration(animation_length)</span><br><span class=\"line\">    .attr(<span class=\"string\">'x2'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">d</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> projection(location_data[d])[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .attr(<span class=\"string\">'y2'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">d</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> projection(location_data[d])[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>Putting the above code into functions will make it easier when updating.</strong></p>\n<h5 id=\"Step-3-Add-Controller-and-Event-Listenner\"><a href=\"#Step-3-Add-Controller-and-Event-Listenner\" class=\"headerlink\" title=\"Step 3:  Add Controller and Event-Listenner\"></a>Step 3:  Add Controller and Event-Listenner</h5><p>The most important one is the one for the map. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.select(<span class=\"string\">'#map'</span>).call(</span><br><span class=\"line\">    d3.behavior.zoom()</span><br><span class=\"line\">        .on(<span class=\"string\">'zoom'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> scale = d3.event.scale;</span><br><span class=\"line\">            <span class=\"comment\">//Update projection (projection will be changed after zooming or dragging)</span></span><br><span class=\"line\">            projection = d3.geo.equirectangular()</span><br><span class=\"line\">                .center([<span class=\"number\">-98</span>, <span class=\"number\">38</span>])</span><br><span class=\"line\">                .scale(default_scale * scale)</span><br><span class=\"line\">                .translate([width / <span class=\"number\">2</span> * scale + d3.event.translate[<span class=\"number\">0</span>], height / <span class=\"number\">2</span> * scale + d3.event.translate[<span class=\"number\">1</span>]]);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//Your functions toupdate map and svg shapes...</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>Also controllers for the other inputs.</p>\n<hr>\n<p><strong>The End</strong></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Preview-Lines-in-the-Map\"><a href=\"#Preview-Lines-in-the-Map\" class=\"headerlink\" title=\"Preview: Lines in the Map\"></a>Preview: Lines in the Map</h4><p>This map shows the connections among different locations.</p>\n<iframe width=\"820\" height=\"520\" src=\"https://brucehenry.github.io/blog-webpage/interactive-map/02/advanced_map.html\">You browser does not support iframe tag, <a href=\"https://brucehenry.github.io/blog-webpage/interactive-map/02/advanced_map.html\" target=\"_blank\">click here to visit</a>.</iframe>\n\n<hr>\n<h4 id=\"What-tools-do-you-use\"><a href=\"#What-tools-do-you-use\" class=\"headerlink\" title=\"What tools do you use?\"></a>What tools do you use?</h4><p>I still use the same tools as the previous blog (<a href=\"https://brucehenry.github.io/blog/public/2018/01/19/InteractiveMap_01/\" target=\"_blank\" rel=\"noopener\">Make an Interactive Map 01</a>): <a href=\"http://datamaps.github.io/\" target=\"_blank\" rel=\"noopener\">DataMaps</a> and <a href=\"https://d3js.org/\" target=\"_blank\" rel=\"noopener\">D3</a>.</p>\n<p>However, this time functions in <strong>D3</strong> is largely used to manipulate <code>svg</code> elements based on the map.</p>\n<hr>\n<h4 id=\"Show-me-the-code\"><a href=\"#Show-me-the-code\" class=\"headerlink\" title=\"Show me the code!\"></a>Show me the code!</h4><p>You can find the code at this <a href=\"https://github.com/BruceHenry/blog-webpage/tree/master/interactive-map/02\" target=\"_blank\" rel=\"noopener\">Github Repository</a>. </p>\n<p>Let me briefly introduce the steps of making this data visualization. I will skip the <strong>rendering map</strong> part that has already covered in my previous blog.</p>\n<h5 id=\"Step-1-Set-Projection-with-d3-geo\"><a href=\"#Step-1-Set-Projection-with-d3-geo\" class=\"headerlink\" title=\"Step 1: Set Projection with d3.geo\"></a>Step 1: Set Projection with <code>d3.geo</code></h5><p><strong>Projection</strong> means the center of map, so we need it to convert real-world coordinates(longitude and latitude) into locations in our map. It should be <strong>updated</strong> every time user drag or zoom in/out.</p>\n<p>Projection contains <strong>center</strong>, <strong>scale</strong>, and <strong>translate</strong>.</p>\n<ul>\n<li><strong>Center</strong> is an array of longitude and latitude.</li>\n<li><strong>Scale</strong> is the height of the map, which means the relative size in the map.</li>\n<li><strong>Translate</strong> is to set the coordinate origin to be the center of map instead of top-left corner, so the values should be half of width and height.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Get width and height of the outer &lt;div&gt; to set projection</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> map_div = d3.select(<span class=\"string\">'#map'</span>).node().getBoundingClientRect();</span><br><span class=\"line\"><span class=\"keyword\">var</span> width = map_div.width;</span><br><span class=\"line\"><span class=\"keyword\">var</span> height = map_div.height;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//This value is the initial scale of map. </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> default_scale = <span class=\"number\">500</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> projection = d3.geo.equirectangular()</span><br><span class=\"line\">    .center([<span class=\"number\">-98</span>, <span class=\"number\">38</span>])<span class=\"comment\">//[longitude, latitude], the approximate center of USA is [-98, 38].</span></span><br><span class=\"line\">    .scale(default_scale)<span class=\"comment\">//Initial scale</span></span><br><span class=\"line\">    .translate([width / <span class=\"number\">2</span>, height / <span class=\"number\">2</span>]);</span><br></pre></td></tr></table></figure>\n<h5 id=\"Step-2-Use-D3-to-Draw-SVG-Shapes\"><a href=\"#Step-2-Use-D3-to-Draw-SVG-Shapes\" class=\"headerlink\" title=\"Step 2: Use D3 to Draw SVG Shapes\"></a>Step 2: Use D3 to Draw SVG Shapes</h5><p>This is such a powerful part of D3. You can manipulate SVG elements easily with D3. Let’s see how to do that.</p>\n<p>First you need to create a <code>&lt;svg&gt;&lt;/svg&gt;</code> element and have an <strong>array</strong> of data.</p>\n<p>Then set the attributes using D3. Use <code>data(data_source).enter()</code> to set the data, <code>append(tag)</code> to add element, <code>attr()</code> to set an attribute, and <code>style()</code> to set styles. Also, use <code>on()</code> to add listener event for interaction.</p>\n<p>For circles,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Append all circles into a &lt;g&gt; tag in order to manipulate them easily.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> circles = d3.select(<span class=\"string\">'svg'</span>)</span><br><span class=\"line\">    .append(<span class=\"string\">'g'</span>)</span><br><span class=\"line\">    .attr(<span class=\"string\">'id'</span>, <span class=\"string\">'circles'</span>)</span><br><span class=\"line\">    .selectAll(<span class=\"string\">'circle'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Set attributes and styles of circles based on the data</span></span><br><span class=\"line\">circles.data(data)</span><br><span class=\"line\">    .enter()</span><br><span class=\"line\">    .append(<span class=\"string\">'circle'</span>)</span><br><span class=\"line\">    .attr(<span class=\"string\">'fill'</span>, <span class=\"string\">'#ffb043'</span>)</span><br><span class=\"line\">    .attr(<span class=\"string\">'r'</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">    .attr(<span class=\"string\">'cx'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">d</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> projection(d.location)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .attr(<span class=\"string\">'cy'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">d</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> projection(d.location)[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">d</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//Click Event</span></span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>For lines, to add animation use <code>.transition().duration(millisecond)</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colorScale = d3.scale.category20();<span class=\"comment\">//To make the lines be in different colors.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Append all lines into a &lt;g&gt; tag in order to manipulate them easily.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lines = d3.select(<span class=\"string\">'svg'</span>)</span><br><span class=\"line\">        .append(<span class=\"string\">'g'</span>)</span><br><span class=\"line\">        .attr(<span class=\"string\">'id'</span>, <span class=\"string\">'lines'</span>)</span><br><span class=\"line\">        .selectAll(<span class=\"string\">'line'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Set attributes and styles of lines based on the data</span></span><br><span class=\"line\">lines.data(data)</span><br><span class=\"line\">    .enter()</span><br><span class=\"line\">    .append(<span class=\"string\">'line'</span>)</span><br><span class=\"line\">    .attr(<span class=\"string\">'x1'</span>, projection(location_data[city])[<span class=\"number\">0</span>])</span><br><span class=\"line\">    .attr(<span class=\"string\">'y1'</span>, projection(location_data[city])[<span class=\"number\">1</span>])</span><br><span class=\"line\">    .attr(<span class=\"string\">'x2'</span>, projection(location_data[city])[<span class=\"number\">0</span>])</span><br><span class=\"line\">    .attr(<span class=\"string\">'y2'</span>, projection(location_data[city])[<span class=\"number\">1</span>])</span><br><span class=\"line\">    .style(<span class=\"string\">'stroke-width'</span>, <span class=\"string\">'3px'</span>)</span><br><span class=\"line\">    .style(<span class=\"string\">'stroke'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> colorScale(<span class=\"built_in\">Math</span>.random());</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .style(<span class=\"string\">'stroke-linecap'</span>, <span class=\"string\">'round'</span>)</span><br><span class=\"line\">    .transition()</span><br><span class=\"line\">    .duration(animation_length)</span><br><span class=\"line\">    .attr(<span class=\"string\">'x2'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">d</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> projection(location_data[d])[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .attr(<span class=\"string\">'y2'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">d</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> projection(location_data[d])[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>Putting the above code into functions will make it easier when updating.</strong></p>\n<h5 id=\"Step-3-Add-Controller-and-Event-Listenner\"><a href=\"#Step-3-Add-Controller-and-Event-Listenner\" class=\"headerlink\" title=\"Step 3:  Add Controller and Event-Listenner\"></a>Step 3:  Add Controller and Event-Listenner</h5><p>The most important one is the one for the map. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.select(<span class=\"string\">'#map'</span>).call(</span><br><span class=\"line\">    d3.behavior.zoom()</span><br><span class=\"line\">        .on(<span class=\"string\">'zoom'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> scale = d3.event.scale;</span><br><span class=\"line\">            <span class=\"comment\">//Update projection (projection will be changed after zooming or dragging)</span></span><br><span class=\"line\">            projection = d3.geo.equirectangular()</span><br><span class=\"line\">                .center([<span class=\"number\">-98</span>, <span class=\"number\">38</span>])</span><br><span class=\"line\">                .scale(default_scale * scale)</span><br><span class=\"line\">                .translate([width / <span class=\"number\">2</span> * scale + d3.event.translate[<span class=\"number\">0</span>], height / <span class=\"number\">2</span> * scale + d3.event.translate[<span class=\"number\">1</span>]]);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//Your functions toupdate map and svg shapes...</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>Also controllers for the other inputs.</p>\n<hr>\n<p><strong>The End</strong></p>\n<hr>\n"},{"title":"JVM Memory Structure","date":"2018-02-08T01:03:50.000Z","description":"Introduction to Java Virtual Machine Memory Structure","_content":"# What is JVM?\n\n**JVM** (Java Virtual Machine) is the program that run your Java applications.\n\nAs part of **JRE** (Java Run Environment), JVM is the one that actually calls the `main()` method. It is also the JVM that **loads**, **links** and **initializes** the `.class` files compiled from `.java` by the compiler(javac).\n\n***\n\n# JVM Memory Components\n\nThere are **five** components in JVM memory: \n- Stack Area\n- PC Registers\n- Native Method Area\n- Method Area\n- Heap\n\n**Heap** and **Method Area** are shared by all threads, while **Stack Area**, **PC Registers** and **Native Method Area** are owned by each thread.\n\nThe following diagram shows whether each of them is shared or not.\n{% asset_img JVM-Memory.png [JVM Memory] %}\n\n\n**Stack Area**\n\nEvery time a new thread is created, JVM creates a separate Stack Area for it. The Stack Area** consists of Local Variable Array, Operand Stack and Frame Data.\n\n- **Local Variable Array**: Storing local variables of the method.\n- **Operand Stack**: Storing the intermediate calculation results.\n- **Frame Data**: Containing constant pool and Exception table.\n\n**PC Registers**\n\nEach thread has separate PC Registers to record the current executing instruction.\n\n**Native Method Area**\n\nEach thread has separate Native Method Area to store native method information.\n\n**Method Area**\n\nAll the **class** level data including static variables are stored here.\n\n**Heap**\n\nAll the **objects** are stored here, which means you will use the Heap every time you use the key word `new`. Besides, **Garbage Collection** mainly happens in the Heap.\n\n***\n\n**The End**\n\n***\n","source":"_posts/JVM-Memory-Structure.md","raw":"---\ntitle: JVM Memory Structure\ndate: 2018-02-07 20:03:50\ncategories:\n- Advanced Java\ntags:\n- Java\n- JVM\ndescription: Introduction to Java Virtual Machine Memory Structure\n---\n# What is JVM?\n\n**JVM** (Java Virtual Machine) is the program that run your Java applications.\n\nAs part of **JRE** (Java Run Environment), JVM is the one that actually calls the `main()` method. It is also the JVM that **loads**, **links** and **initializes** the `.class` files compiled from `.java` by the compiler(javac).\n\n***\n\n# JVM Memory Components\n\nThere are **five** components in JVM memory: \n- Stack Area\n- PC Registers\n- Native Method Area\n- Method Area\n- Heap\n\n**Heap** and **Method Area** are shared by all threads, while **Stack Area**, **PC Registers** and **Native Method Area** are owned by each thread.\n\nThe following diagram shows whether each of them is shared or not.\n{% asset_img JVM-Memory.png [JVM Memory] %}\n\n\n**Stack Area**\n\nEvery time a new thread is created, JVM creates a separate Stack Area for it. The Stack Area** consists of Local Variable Array, Operand Stack and Frame Data.\n\n- **Local Variable Array**: Storing local variables of the method.\n- **Operand Stack**: Storing the intermediate calculation results.\n- **Frame Data**: Containing constant pool and Exception table.\n\n**PC Registers**\n\nEach thread has separate PC Registers to record the current executing instruction.\n\n**Native Method Area**\n\nEach thread has separate Native Method Area to store native method information.\n\n**Method Area**\n\nAll the **class** level data including static variables are stored here.\n\n**Heap**\n\nAll the **objects** are stored here, which means you will use the Heap every time you use the key word `new`. Besides, **Garbage Collection** mainly happens in the Heap.\n\n***\n\n**The End**\n\n***\n","slug":"JVM-Memory-Structure","published":1,"updated":"2020-04-05T02:00:38.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8mityvf00095weqhya376p2","content":"<h1 id=\"What-is-JVM\"><a href=\"#What-is-JVM\" class=\"headerlink\" title=\"What is JVM?\"></a>What is JVM?</h1><p><strong>JVM</strong> (Java Virtual Machine) is the program that run your Java applications.</p>\n<p>As part of <strong>JRE</strong> (Java Run Environment), JVM is the one that actually calls the <code>main()</code> method. It is also the JVM that <strong>loads</strong>, <strong>links</strong> and <strong>initializes</strong> the <code>.class</code> files compiled from <code>.java</code> by the compiler(javac).</p>\n<hr>\n<h1 id=\"JVM-Memory-Components\"><a href=\"#JVM-Memory-Components\" class=\"headerlink\" title=\"JVM Memory Components\"></a>JVM Memory Components</h1><p>There are <strong>five</strong> components in JVM memory: </p>\n<ul>\n<li>Stack Area</li>\n<li>PC Registers</li>\n<li>Native Method Area</li>\n<li>Method Area</li>\n<li>Heap</li>\n</ul>\n<p><strong>Heap</strong> and <strong>Method Area</strong> are shared by all threads, while <strong>Stack Area</strong>, <strong>PC Registers</strong> and <strong>Native Method Area</strong> are owned by each thread.</p>\n<p>The following diagram shows whether each of them is shared or not.</p>\n<img src=\"/2018/02/07/JVM-Memory-Structure/JVM-Memory.png\" class=\"\" title=\"[JVM Memory]\">\n\n\n<p><strong>Stack Area</strong></p>\n<p>Every time a new thread is created, JVM creates a separate Stack Area for it. The Stack Area** consists of Local Variable Array, Operand Stack and Frame Data.</p>\n<ul>\n<li><strong>Local Variable Array</strong>: Storing local variables of the method.</li>\n<li><strong>Operand Stack</strong>: Storing the intermediate calculation results.</li>\n<li><strong>Frame Data</strong>: Containing constant pool and Exception table.</li>\n</ul>\n<p><strong>PC Registers</strong></p>\n<p>Each thread has separate PC Registers to record the current executing instruction.</p>\n<p><strong>Native Method Area</strong></p>\n<p>Each thread has separate Native Method Area to store native method information.</p>\n<p><strong>Method Area</strong></p>\n<p>All the <strong>class</strong> level data including static variables are stored here.</p>\n<p><strong>Heap</strong></p>\n<p>All the <strong>objects</strong> are stored here, which means you will use the Heap every time you use the key word <code>new</code>. Besides, <strong>Garbage Collection</strong> mainly happens in the Heap.</p>\n<hr>\n<p><strong>The End</strong></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"What-is-JVM\"><a href=\"#What-is-JVM\" class=\"headerlink\" title=\"What is JVM?\"></a>What is JVM?</h1><p><strong>JVM</strong> (Java Virtual Machine) is the program that run your Java applications.</p>\n<p>As part of <strong>JRE</strong> (Java Run Environment), JVM is the one that actually calls the <code>main()</code> method. It is also the JVM that <strong>loads</strong>, <strong>links</strong> and <strong>initializes</strong> the <code>.class</code> files compiled from <code>.java</code> by the compiler(javac).</p>\n<hr>\n<h1 id=\"JVM-Memory-Components\"><a href=\"#JVM-Memory-Components\" class=\"headerlink\" title=\"JVM Memory Components\"></a>JVM Memory Components</h1><p>There are <strong>five</strong> components in JVM memory: </p>\n<ul>\n<li>Stack Area</li>\n<li>PC Registers</li>\n<li>Native Method Area</li>\n<li>Method Area</li>\n<li>Heap</li>\n</ul>\n<p><strong>Heap</strong> and <strong>Method Area</strong> are shared by all threads, while <strong>Stack Area</strong>, <strong>PC Registers</strong> and <strong>Native Method Area</strong> are owned by each thread.</p>\n<p>The following diagram shows whether each of them is shared or not.</p>\n<img src=\"/2018/02/07/JVM-Memory-Structure/JVM-Memory.png\" class=\"\" title=\"[JVM Memory]\">\n\n\n<p><strong>Stack Area</strong></p>\n<p>Every time a new thread is created, JVM creates a separate Stack Area for it. The Stack Area** consists of Local Variable Array, Operand Stack and Frame Data.</p>\n<ul>\n<li><strong>Local Variable Array</strong>: Storing local variables of the method.</li>\n<li><strong>Operand Stack</strong>: Storing the intermediate calculation results.</li>\n<li><strong>Frame Data</strong>: Containing constant pool and Exception table.</li>\n</ul>\n<p><strong>PC Registers</strong></p>\n<p>Each thread has separate PC Registers to record the current executing instruction.</p>\n<p><strong>Native Method Area</strong></p>\n<p>Each thread has separate Native Method Area to store native method information.</p>\n<p><strong>Method Area</strong></p>\n<p>All the <strong>class</strong> level data including static variables are stored here.</p>\n<p><strong>Heap</strong></p>\n<p>All the <strong>objects</strong> are stored here, which means you will use the Heap every time you use the key word <code>new</code>. Besides, <strong>Garbage Collection</strong> mainly happens in the Heap.</p>\n<hr>\n<p><strong>The End</strong></p>\n<hr>\n"},{"title":"Introduction to Java Garbage Collection","date":"2018-02-15T00:38:22.000Z","description":"What is Garbage? Why do we discuss Garbage Collection? How to identify and collect garbage?","_content":"# What is Garbage?\n\n{% asset_img garbage.png [Garbage] %}\n\nEvery time you create a new object, you consume some memory to store it. And when you no longer use it, it becomes garbage.\n\nUnless you have infinite memory space, you need to collect memory to free the occupied memory space.\n\n***\n\n# Why do we discuss Garbage Collection in Java?\n\nIn **C/C++**, you need to use `free()` or `delete` to release the memory for garbage, or it will cause **memory leak**.\n\nBut in **Java**, you do not need to worry about that. JVM will automatically collect garbage, though it does not mean that you can create objects without limit. You can call `System.gc()` to explicitly tell JVM to do the GC, but JVM may not guarantee to do that.\n\nWhen the memory is almost used up, JVM will pause the program for a while to do the GC. And here are the choices, you want the GC to be long and rare, or short and frequent. By learning the strategy of Java GC, you can optimize your JVM and make it suitable for your application.\n\n***\n\n# How to identify garbage?\n\nIn general, there are two ways to identify garbage.\n\n- **Reference Counting**\n{% asset_img reference_counting.png [Reference Counting] %}\n\nThe easiest way is to count the reference of all the objects, then objects without being referenced are garbage. But here is a bug, what if two garbage objects reference to each other.\n\n- **Reachability Analysis**\n{% asset_img reachability.png [Reachability] %}\n\nTry to reach all the referenced objects from some root objects, then the ones without reaching are the garbage.\n\nThe root objects are called **GC Roots**. The GC Roots normally consists of local variables, static variables and active threads.\n\n***\n\n# How to collect garbage?\n\nAfter identifying the garbage, we need to collect it. There is no one general way to do that because there are different memory area with different features. JVM actually uses different ways for different memory area.\n\nHere are some basic strategies being mostly used,\n\n## Mark, Delete and Compact\n{% asset_img CDC.png [Mark, Delete and Compact] %}\n\nFirst mark the garbage objects, then delete them. But now the there are empty holes in the memory with probably different sizes, which is very difficult to use later.\n\nSo the next step is to compact the memory by moving the remaining object to one side of the memory.\n\n##  Mark and Copy\n{% asset_img Copy.png [Copy GC] %}\n\nFirst mark the garbage objects, then copy the non-garbage objects to a new area of memory.\n\nHowever, this strategy needs **twice** memory space as it actually needs.\n\n##  Generational Garbage Collection\n\nSplit the memory into two parts, **young generation** and **old generation**.\n\n**Young generation** area stores objects that are newly created. Every time a object survives from GC, add one to the age of this object. When the age reaches a certain level, move this object to the **old generation** area.\n\nEventually, new and less important objects are in the **young generation** area, while old but important objects are in the **old generation** area. \n***\n\n**The End**\n\n***\n","source":"_posts/Introduction-to-Java-Garbage-Collection.md","raw":"---\ntitle: Introduction to Java Garbage Collection\ndate: 2018-02-14 19:38:22\ncategories:\n- Advanced Java\ntags:\n- Java\n- JVM\ndescription: What is Garbage? Why do we discuss Garbage Collection? How to identify and collect garbage?\n---\n# What is Garbage?\n\n{% asset_img garbage.png [Garbage] %}\n\nEvery time you create a new object, you consume some memory to store it. And when you no longer use it, it becomes garbage.\n\nUnless you have infinite memory space, you need to collect memory to free the occupied memory space.\n\n***\n\n# Why do we discuss Garbage Collection in Java?\n\nIn **C/C++**, you need to use `free()` or `delete` to release the memory for garbage, or it will cause **memory leak**.\n\nBut in **Java**, you do not need to worry about that. JVM will automatically collect garbage, though it does not mean that you can create objects without limit. You can call `System.gc()` to explicitly tell JVM to do the GC, but JVM may not guarantee to do that.\n\nWhen the memory is almost used up, JVM will pause the program for a while to do the GC. And here are the choices, you want the GC to be long and rare, or short and frequent. By learning the strategy of Java GC, you can optimize your JVM and make it suitable for your application.\n\n***\n\n# How to identify garbage?\n\nIn general, there are two ways to identify garbage.\n\n- **Reference Counting**\n{% asset_img reference_counting.png [Reference Counting] %}\n\nThe easiest way is to count the reference of all the objects, then objects without being referenced are garbage. But here is a bug, what if two garbage objects reference to each other.\n\n- **Reachability Analysis**\n{% asset_img reachability.png [Reachability] %}\n\nTry to reach all the referenced objects from some root objects, then the ones without reaching are the garbage.\n\nThe root objects are called **GC Roots**. The GC Roots normally consists of local variables, static variables and active threads.\n\n***\n\n# How to collect garbage?\n\nAfter identifying the garbage, we need to collect it. There is no one general way to do that because there are different memory area with different features. JVM actually uses different ways for different memory area.\n\nHere are some basic strategies being mostly used,\n\n## Mark, Delete and Compact\n{% asset_img CDC.png [Mark, Delete and Compact] %}\n\nFirst mark the garbage objects, then delete them. But now the there are empty holes in the memory with probably different sizes, which is very difficult to use later.\n\nSo the next step is to compact the memory by moving the remaining object to one side of the memory.\n\n##  Mark and Copy\n{% asset_img Copy.png [Copy GC] %}\n\nFirst mark the garbage objects, then copy the non-garbage objects to a new area of memory.\n\nHowever, this strategy needs **twice** memory space as it actually needs.\n\n##  Generational Garbage Collection\n\nSplit the memory into two parts, **young generation** and **old generation**.\n\n**Young generation** area stores objects that are newly created. Every time a object survives from GC, add one to the age of this object. When the age reaches a certain level, move this object to the **old generation** area.\n\nEventually, new and less important objects are in the **young generation** area, while old but important objects are in the **old generation** area. \n***\n\n**The End**\n\n***\n","slug":"Introduction-to-Java-Garbage-Collection","published":1,"updated":"2020-04-05T02:21:19.206Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8mityvg000c5weq0chedk07","content":"<h1 id=\"What-is-Garbage\"><a href=\"#What-is-Garbage\" class=\"headerlink\" title=\"What is Garbage?\"></a>What is Garbage?</h1><img src=\"/2018/02/14/Introduction-to-Java-Garbage-Collection/garbage.png\" class=\"\" title=\"[Garbage]\">\n\n<p>Every time you create a new object, you consume some memory to store it. And when you no longer use it, it becomes garbage.</p>\n<p>Unless you have infinite memory space, you need to collect memory to free the occupied memory space.</p>\n<hr>\n<h1 id=\"Why-do-we-discuss-Garbage-Collection-in-Java\"><a href=\"#Why-do-we-discuss-Garbage-Collection-in-Java\" class=\"headerlink\" title=\"Why do we discuss Garbage Collection in Java?\"></a>Why do we discuss Garbage Collection in Java?</h1><p>In <strong>C/C++</strong>, you need to use <code>free()</code> or <code>delete</code> to release the memory for garbage, or it will cause <strong>memory leak</strong>.</p>\n<p>But in <strong>Java</strong>, you do not need to worry about that. JVM will automatically collect garbage, though it does not mean that you can create objects without limit. You can call <code>System.gc()</code> to explicitly tell JVM to do the GC, but JVM may not guarantee to do that.</p>\n<p>When the memory is almost used up, JVM will pause the program for a while to do the GC. And here are the choices, you want the GC to be long and rare, or short and frequent. By learning the strategy of Java GC, you can optimize your JVM and make it suitable for your application.</p>\n<hr>\n<h1 id=\"How-to-identify-garbage\"><a href=\"#How-to-identify-garbage\" class=\"headerlink\" title=\"How to identify garbage?\"></a>How to identify garbage?</h1><p>In general, there are two ways to identify garbage.</p>\n<ul>\n<li><strong>Reference Counting</strong><img src=\"/2018/02/14/Introduction-to-Java-Garbage-Collection/reference_counting.png\" class=\"\" title=\"[Reference Counting]\">\n\n</li>\n</ul>\n<p>The easiest way is to count the reference of all the objects, then objects without being referenced are garbage. But here is a bug, what if two garbage objects reference to each other.</p>\n<ul>\n<li><strong>Reachability Analysis</strong><img src=\"/2018/02/14/Introduction-to-Java-Garbage-Collection/reachability.png\" class=\"\" title=\"[Reachability]\">\n\n</li>\n</ul>\n<p>Try to reach all the referenced objects from some root objects, then the ones without reaching are the garbage.</p>\n<p>The root objects are called <strong>GC Roots</strong>. The GC Roots normally consists of local variables, static variables and active threads.</p>\n<hr>\n<h1 id=\"How-to-collect-garbage\"><a href=\"#How-to-collect-garbage\" class=\"headerlink\" title=\"How to collect garbage?\"></a>How to collect garbage?</h1><p>After identifying the garbage, we need to collect it. There is no one general way to do that because there are different memory area with different features. JVM actually uses different ways for different memory area.</p>\n<p>Here are some basic strategies being mostly used,</p>\n<h2 id=\"Mark-Delete-and-Compact\"><a href=\"#Mark-Delete-and-Compact\" class=\"headerlink\" title=\"Mark, Delete and Compact\"></a>Mark, Delete and Compact</h2><img src=\"/2018/02/14/Introduction-to-Java-Garbage-Collection/CDC.png\" class=\"\" title=\"[Mark, Delete and Compact]\">\n\n<p>First mark the garbage objects, then delete them. But now the there are empty holes in the memory with probably different sizes, which is very difficult to use later.</p>\n<p>So the next step is to compact the memory by moving the remaining object to one side of the memory.</p>\n<h2 id=\"Mark-and-Copy\"><a href=\"#Mark-and-Copy\" class=\"headerlink\" title=\"Mark and Copy\"></a>Mark and Copy</h2><img src=\"/2018/02/14/Introduction-to-Java-Garbage-Collection/Copy.png\" class=\"\" title=\"[Copy GC]\">\n\n<p>First mark the garbage objects, then copy the non-garbage objects to a new area of memory.</p>\n<p>However, this strategy needs <strong>twice</strong> memory space as it actually needs.</p>\n<h2 id=\"Generational-Garbage-Collection\"><a href=\"#Generational-Garbage-Collection\" class=\"headerlink\" title=\"Generational Garbage Collection\"></a>Generational Garbage Collection</h2><p>Split the memory into two parts, <strong>young generation</strong> and <strong>old generation</strong>.</p>\n<p><strong>Young generation</strong> area stores objects that are newly created. Every time a object survives from GC, add one to the age of this object. When the age reaches a certain level, move this object to the <strong>old generation</strong> area.</p>\n<p>Eventually, new and less important objects are in the <strong>young generation</strong> area, while old but important objects are in the <strong>old generation</strong> area. </p>\n<hr>\n<p><strong>The End</strong></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"What-is-Garbage\"><a href=\"#What-is-Garbage\" class=\"headerlink\" title=\"What is Garbage?\"></a>What is Garbage?</h1><img src=\"/2018/02/14/Introduction-to-Java-Garbage-Collection/garbage.png\" class=\"\" title=\"[Garbage]\">\n\n<p>Every time you create a new object, you consume some memory to store it. And when you no longer use it, it becomes garbage.</p>\n<p>Unless you have infinite memory space, you need to collect memory to free the occupied memory space.</p>\n<hr>\n<h1 id=\"Why-do-we-discuss-Garbage-Collection-in-Java\"><a href=\"#Why-do-we-discuss-Garbage-Collection-in-Java\" class=\"headerlink\" title=\"Why do we discuss Garbage Collection in Java?\"></a>Why do we discuss Garbage Collection in Java?</h1><p>In <strong>C/C++</strong>, you need to use <code>free()</code> or <code>delete</code> to release the memory for garbage, or it will cause <strong>memory leak</strong>.</p>\n<p>But in <strong>Java</strong>, you do not need to worry about that. JVM will automatically collect garbage, though it does not mean that you can create objects without limit. You can call <code>System.gc()</code> to explicitly tell JVM to do the GC, but JVM may not guarantee to do that.</p>\n<p>When the memory is almost used up, JVM will pause the program for a while to do the GC. And here are the choices, you want the GC to be long and rare, or short and frequent. By learning the strategy of Java GC, you can optimize your JVM and make it suitable for your application.</p>\n<hr>\n<h1 id=\"How-to-identify-garbage\"><a href=\"#How-to-identify-garbage\" class=\"headerlink\" title=\"How to identify garbage?\"></a>How to identify garbage?</h1><p>In general, there are two ways to identify garbage.</p>\n<ul>\n<li><strong>Reference Counting</strong><img src=\"/2018/02/14/Introduction-to-Java-Garbage-Collection/reference_counting.png\" class=\"\" title=\"[Reference Counting]\">\n\n</li>\n</ul>\n<p>The easiest way is to count the reference of all the objects, then objects without being referenced are garbage. But here is a bug, what if two garbage objects reference to each other.</p>\n<ul>\n<li><strong>Reachability Analysis</strong><img src=\"/2018/02/14/Introduction-to-Java-Garbage-Collection/reachability.png\" class=\"\" title=\"[Reachability]\">\n\n</li>\n</ul>\n<p>Try to reach all the referenced objects from some root objects, then the ones without reaching are the garbage.</p>\n<p>The root objects are called <strong>GC Roots</strong>. The GC Roots normally consists of local variables, static variables and active threads.</p>\n<hr>\n<h1 id=\"How-to-collect-garbage\"><a href=\"#How-to-collect-garbage\" class=\"headerlink\" title=\"How to collect garbage?\"></a>How to collect garbage?</h1><p>After identifying the garbage, we need to collect it. There is no one general way to do that because there are different memory area with different features. JVM actually uses different ways for different memory area.</p>\n<p>Here are some basic strategies being mostly used,</p>\n<h2 id=\"Mark-Delete-and-Compact\"><a href=\"#Mark-Delete-and-Compact\" class=\"headerlink\" title=\"Mark, Delete and Compact\"></a>Mark, Delete and Compact</h2><img src=\"/2018/02/14/Introduction-to-Java-Garbage-Collection/CDC.png\" class=\"\" title=\"[Mark, Delete and Compact]\">\n\n<p>First mark the garbage objects, then delete them. But now the there are empty holes in the memory with probably different sizes, which is very difficult to use later.</p>\n<p>So the next step is to compact the memory by moving the remaining object to one side of the memory.</p>\n<h2 id=\"Mark-and-Copy\"><a href=\"#Mark-and-Copy\" class=\"headerlink\" title=\"Mark and Copy\"></a>Mark and Copy</h2><img src=\"/2018/02/14/Introduction-to-Java-Garbage-Collection/Copy.png\" class=\"\" title=\"[Copy GC]\">\n\n<p>First mark the garbage objects, then copy the non-garbage objects to a new area of memory.</p>\n<p>However, this strategy needs <strong>twice</strong> memory space as it actually needs.</p>\n<h2 id=\"Generational-Garbage-Collection\"><a href=\"#Generational-Garbage-Collection\" class=\"headerlink\" title=\"Generational Garbage Collection\"></a>Generational Garbage Collection</h2><p>Split the memory into two parts, <strong>young generation</strong> and <strong>old generation</strong>.</p>\n<p><strong>Young generation</strong> area stores objects that are newly created. Every time a object survives from GC, add one to the age of this object. When the age reaches a certain level, move this object to the <strong>old generation</strong> area.</p>\n<p>Eventually, new and less important objects are in the <strong>young generation</strong> area, while old but important objects are in the <strong>old generation</strong> area. </p>\n<hr>\n<p><strong>The End</strong></p>\n<hr>\n"},{"title":"Install Java on Windows","date":"2017-11-19T07:45:45.000Z","description":"Steps of installing Java and setting environment variables on Windows.","_content":"\n# Download and Install JDK.\nTo develop Java programs, you need to install **JDK** (Java Development Kit). You may also heard of **JRE** (Java Runtime Environment), which is essential to run Java program. Well, JRE is contained in the JDK, so all you need to do is to download and install JDK.\n\nThere are many ways to download JDK, but I recommend you to download it directly from [Oracle](http://www.oracle.com/technetwork/java/javase/downloads/index.html) or [OpenJDK](https://openjdk.java.net/).\n\nAfter downloading, install it just as you install other software. You'd better remember where you install it, because you need to set the environment variable later.\n\n***\n# Set the Environment Variables\n\nThis step is very **important**, \n\n1. In Control Panel, click \"System and Security\", then click \"System\"\n\n2. Click \"Advanced system settings\"\n{% asset_img system-setting.png [Advanced system settings] %}\n\n3. Find \"Environment Variables\" under the \"Advanced'\" tab\n{% asset_img advanced.png [Advanced] %}\n\n4. Add the following Environment Variables\n\n- JAVA_HOME：`C:\\Program Files\\Java\\jdk1.8.0_102` (**Replace with the path where you installed JDK**)\n- JDK_HOME：`%JAVA_HOME%`\n- JRE_HOME：`%JAVA_HOME%\\jre`\n- CLASSPATH：`.;%JAVA_HOME%\\lib;%JAVA_HOME%\\jre\\lib`\n- Path： **Keep existing content and append** `%JAVA_HOME%\\bin` \n\n**Note:**  You may need to append  `;` first. It depends on whether this was a `;` at the end of your original path. So you may append `;%JAVA_HOME%\\bin`. Do **NOT** change the original content of \"Path\".\n\n\n***\n# Examine the Installation\n\nOpen the Terminal (On Windows, press 'Win' + 'R', then input `cmd` and press 'Enter'), input:\n\n```bash\n    java -version\n```\n\nYou should see the version information of Java, which means your Java installation is successful.\n{% asset_img version.png [Java Version] %}\nWelcome to the world of Java.\n***\n\n**The End**\n\n***","source":"_posts/JavaInstallation.md","raw":"---\ntitle: Install Java on Windows\ndate: 2017-11-19 02:45:45\ncategories: Basic Java\ntags: Java\ndescription: Steps of installing Java and setting environment variables on Windows.\n---\n\n# Download and Install JDK.\nTo develop Java programs, you need to install **JDK** (Java Development Kit). You may also heard of **JRE** (Java Runtime Environment), which is essential to run Java program. Well, JRE is contained in the JDK, so all you need to do is to download and install JDK.\n\nThere are many ways to download JDK, but I recommend you to download it directly from [Oracle](http://www.oracle.com/technetwork/java/javase/downloads/index.html) or [OpenJDK](https://openjdk.java.net/).\n\nAfter downloading, install it just as you install other software. You'd better remember where you install it, because you need to set the environment variable later.\n\n***\n# Set the Environment Variables\n\nThis step is very **important**, \n\n1. In Control Panel, click \"System and Security\", then click \"System\"\n\n2. Click \"Advanced system settings\"\n{% asset_img system-setting.png [Advanced system settings] %}\n\n3. Find \"Environment Variables\" under the \"Advanced'\" tab\n{% asset_img advanced.png [Advanced] %}\n\n4. Add the following Environment Variables\n\n- JAVA_HOME：`C:\\Program Files\\Java\\jdk1.8.0_102` (**Replace with the path where you installed JDK**)\n- JDK_HOME：`%JAVA_HOME%`\n- JRE_HOME：`%JAVA_HOME%\\jre`\n- CLASSPATH：`.;%JAVA_HOME%\\lib;%JAVA_HOME%\\jre\\lib`\n- Path： **Keep existing content and append** `%JAVA_HOME%\\bin` \n\n**Note:**  You may need to append  `;` first. It depends on whether this was a `;` at the end of your original path. So you may append `;%JAVA_HOME%\\bin`. Do **NOT** change the original content of \"Path\".\n\n\n***\n# Examine the Installation\n\nOpen the Terminal (On Windows, press 'Win' + 'R', then input `cmd` and press 'Enter'), input:\n\n```bash\n    java -version\n```\n\nYou should see the version information of Java, which means your Java installation is successful.\n{% asset_img version.png [Java Version] %}\nWelcome to the world of Java.\n***\n\n**The End**\n\n***","slug":"JavaInstallation","published":1,"updated":"2020-04-05T01:50:12.887Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8mityvh000d5weq5v6k5v74","content":"<h1 id=\"Download-and-Install-JDK\"><a href=\"#Download-and-Install-JDK\" class=\"headerlink\" title=\"Download and Install JDK.\"></a>Download and Install JDK.</h1><p>To develop Java programs, you need to install <strong>JDK</strong> (Java Development Kit). You may also heard of <strong>JRE</strong> (Java Runtime Environment), which is essential to run Java program. Well, JRE is contained in the JDK, so all you need to do is to download and install JDK.</p>\n<p>There are many ways to download JDK, but I recommend you to download it directly from <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">Oracle</a> or <a href=\"https://openjdk.java.net/\" target=\"_blank\" rel=\"noopener\">OpenJDK</a>.</p>\n<p>After downloading, install it just as you install other software. You’d better remember where you install it, because you need to set the environment variable later.</p>\n<hr>\n<h1 id=\"Set-the-Environment-Variables\"><a href=\"#Set-the-Environment-Variables\" class=\"headerlink\" title=\"Set the Environment Variables\"></a>Set the Environment Variables</h1><p>This step is very <strong>important</strong>, </p>\n<ol>\n<li><p>In Control Panel, click “System and Security”, then click “System”</p>\n</li>\n<li><p>Click “Advanced system settings”</p>\n<img src=\"/2017/11/19/JavaInstallation/system-setting.png\" class=\"\" title=\"[Advanced system settings]\">\n</li>\n<li><p>Find “Environment Variables” under the “Advanced’” tab</p>\n<img src=\"/2017/11/19/JavaInstallation/advanced.png\" class=\"\" title=\"[Advanced]\">\n</li>\n<li><p>Add the following Environment Variables</p>\n</li>\n</ol>\n<ul>\n<li>JAVA_HOME：<code>C:\\Program Files\\Java\\jdk1.8.0_102</code> (<strong>Replace with the path where you installed JDK</strong>)</li>\n<li>JDK_HOME：<code>%JAVA_HOME%</code></li>\n<li>JRE_HOME：<code>%JAVA_HOME%\\jre</code></li>\n<li>CLASSPATH：<code>.;%JAVA_HOME%\\lib;%JAVA_HOME%\\jre\\lib</code></li>\n<li>Path： <strong>Keep existing content and append</strong> <code>%JAVA_HOME%\\bin</code> </li>\n</ul>\n<p><strong>Note:</strong>  You may need to append  <code>;</code> first. It depends on whether this was a <code>;</code> at the end of your original path. So you may append <code>;%JAVA_HOME%\\bin</code>. Do <strong>NOT</strong> change the original content of “Path”.</p>\n<hr>\n<h1 id=\"Examine-the-Installation\"><a href=\"#Examine-the-Installation\" class=\"headerlink\" title=\"Examine the Installation\"></a>Examine the Installation</h1><p>Open the Terminal (On Windows, press ‘Win’ + ‘R’, then input <code>cmd</code> and press ‘Enter’), input:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n\n<p>You should see the version information of Java, which means your Java installation is successful.</p>\n<img src=\"/2017/11/19/JavaInstallation/version.png\" class=\"\" title=\"[Java Version]\">\n<p>Welcome to the world of Java.</p>\n<hr>\n<p><strong>The End</strong></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Download-and-Install-JDK\"><a href=\"#Download-and-Install-JDK\" class=\"headerlink\" title=\"Download and Install JDK.\"></a>Download and Install JDK.</h1><p>To develop Java programs, you need to install <strong>JDK</strong> (Java Development Kit). You may also heard of <strong>JRE</strong> (Java Runtime Environment), which is essential to run Java program. Well, JRE is contained in the JDK, so all you need to do is to download and install JDK.</p>\n<p>There are many ways to download JDK, but I recommend you to download it directly from <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">Oracle</a> or <a href=\"https://openjdk.java.net/\" target=\"_blank\" rel=\"noopener\">OpenJDK</a>.</p>\n<p>After downloading, install it just as you install other software. You’d better remember where you install it, because you need to set the environment variable later.</p>\n<hr>\n<h1 id=\"Set-the-Environment-Variables\"><a href=\"#Set-the-Environment-Variables\" class=\"headerlink\" title=\"Set the Environment Variables\"></a>Set the Environment Variables</h1><p>This step is very <strong>important</strong>, </p>\n<ol>\n<li><p>In Control Panel, click “System and Security”, then click “System”</p>\n</li>\n<li><p>Click “Advanced system settings”</p>\n<img src=\"/2017/11/19/JavaInstallation/system-setting.png\" class=\"\" title=\"[Advanced system settings]\">\n</li>\n<li><p>Find “Environment Variables” under the “Advanced’” tab</p>\n<img src=\"/2017/11/19/JavaInstallation/advanced.png\" class=\"\" title=\"[Advanced]\">\n</li>\n<li><p>Add the following Environment Variables</p>\n</li>\n</ol>\n<ul>\n<li>JAVA_HOME：<code>C:\\Program Files\\Java\\jdk1.8.0_102</code> (<strong>Replace with the path where you installed JDK</strong>)</li>\n<li>JDK_HOME：<code>%JAVA_HOME%</code></li>\n<li>JRE_HOME：<code>%JAVA_HOME%\\jre</code></li>\n<li>CLASSPATH：<code>.;%JAVA_HOME%\\lib;%JAVA_HOME%\\jre\\lib</code></li>\n<li>Path： <strong>Keep existing content and append</strong> <code>%JAVA_HOME%\\bin</code> </li>\n</ul>\n<p><strong>Note:</strong>  You may need to append  <code>;</code> first. It depends on whether this was a <code>;</code> at the end of your original path. So you may append <code>;%JAVA_HOME%\\bin</code>. Do <strong>NOT</strong> change the original content of “Path”.</p>\n<hr>\n<h1 id=\"Examine-the-Installation\"><a href=\"#Examine-the-Installation\" class=\"headerlink\" title=\"Examine the Installation\"></a>Examine the Installation</h1><p>Open the Terminal (On Windows, press ‘Win’ + ‘R’, then input <code>cmd</code> and press ‘Enter’), input:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n\n<p>You should see the version information of Java, which means your Java installation is successful.</p>\n<img src=\"/2017/11/19/JavaInstallation/version.png\" class=\"\" title=\"[Java Version]\">\n<p>Welcome to the world of Java.</p>\n<hr>\n<p><strong>The End</strong></p>\n<hr>\n"}],"PostAsset":[{"_id":"source/_posts/Introduction-to-Java-Garbage-Collection/Java-GC.pptx","slug":"Java-GC.pptx","post":"ck8mityvg000c5weq0chedk07","modified":1,"renderable":0},{"_id":"source/_posts/JVM-Memory-Structure/JVM-Memory.png","post":"ck8mityvf00095weqhya376p2","slug":"JVM-Memory.png","modified":1,"renderable":1},{"_id":"source/_posts/JVM-Memory-Structure/JVM-Memory.pptx","post":"ck8mityvf00095weqhya376p2","slug":"JVM-Memory.pptx","modified":1,"renderable":1},{"_id":"source/_posts/JavaInstallation/advanced.png","post":"ck8mityvh000d5weq5v6k5v74","slug":"advanced.png","modified":1,"renderable":1},{"_id":"source/_posts/JavaInstallation/java-oracle.png","post":"ck8mityvh000d5weq5v6k5v74","slug":"java-oracle.png","modified":1,"renderable":1},{"_id":"source/_posts/JavaInstallation/system-setting.png","post":"ck8mityvh000d5weq5v6k5v74","slug":"system-setting.png","modified":1,"renderable":1},{"_id":"source/_posts/JavaInstallation/version.png","post":"ck8mityvh000d5weq5v6k5v74","slug":"version.png","modified":1,"renderable":1},{"_id":"source/_posts/Introduction-to-Java-Garbage-Collection/CDC.png","post":"ck8mityvg000c5weq0chedk07","slug":"CDC.png","modified":1,"renderable":1},{"_id":"source/_posts/Introduction-to-Java-Garbage-Collection/Copy.png","post":"ck8mityvg000c5weq0chedk07","slug":"Copy.png","modified":1,"renderable":1},{"_id":"source/_posts/Introduction-to-Java-Garbage-Collection/garbage.png","post":"ck8mityvg000c5weq0chedk07","slug":"garbage.png","modified":1,"renderable":1},{"_id":"source/_posts/Introduction-to-Java-Garbage-Collection/reachability.png","post":"ck8mityvg000c5weq0chedk07","slug":"reachability.png","modified":1,"renderable":1},{"_id":"source/_posts/Introduction-to-Java-Garbage-Collection/reference_counting.png","post":"ck8mityvg000c5weq0chedk07","slug":"reference_counting.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ck8mityve00085weq72bue9l5","category_id":"ck8mityvb00045weq8dds30yp","_id":"ck8mityvi000e5weq2o1s8aij"},{"post_id":"ck8mityv300005weq2vk14hjz","category_id":"ck8mityvb00045weq8dds30yp","_id":"ck8mityvk000h5weq0q8484y0"},{"post_id":"ck8mityv900025weq2ykhdd7g","category_id":"ck8mityvg000a5weq79a9bobi","_id":"ck8mityvk000l5weq8vadeqnk"},{"post_id":"ck8mityvh000d5weq5v6k5v74","category_id":"ck8mityvg000a5weq79a9bobi","_id":"ck8mityvl000n5weq60o63td6"},{"post_id":"ck8mityvd00065weq9h2faiz1","category_id":"ck8mityvb00045weq8dds30yp","_id":"ck8mityvl000p5weqar867avb"},{"post_id":"ck8mityvf00095weqhya376p2","category_id":"ck8mityvk000k5weq0nlw0wtj","_id":"ck8mityvm000s5weq4rxw8hn9"},{"post_id":"ck8mityvg000c5weq0chedk07","category_id":"ck8mityvk000k5weq0nlw0wtj","_id":"ck8mityvn000w5weq73yd1hp6"}],"PostTag":[{"post_id":"ck8mityv300005weq2vk14hjz","tag_id":"ck8mityvc00055weqazvi4y3t","_id":"ck8mityvk000i5weq0vem69qp"},{"post_id":"ck8mityv300005weq2vk14hjz","tag_id":"ck8mityvg000b5weq9jak40da","_id":"ck8mityvk000j5weqe7hnerx9"},{"post_id":"ck8mityv900025weq2ykhdd7g","tag_id":"ck8mityvi000g5weqgbjzgnr0","_id":"ck8mityvl000o5weqbnrt8l2f"},{"post_id":"ck8mityvd00065weq9h2faiz1","tag_id":"ck8mityvc00055weqazvi4y3t","_id":"ck8mityvm000u5weq0bfwfths"},{"post_id":"ck8mityvd00065weq9h2faiz1","tag_id":"ck8mityvg000b5weq9jak40da","_id":"ck8mityvn000v5weqdf9nh6mv"},{"post_id":"ck8mityve00085weq72bue9l5","tag_id":"ck8mityvc00055weqazvi4y3t","_id":"ck8mityvn000y5weqbl6u9vdc"},{"post_id":"ck8mityve00085weq72bue9l5","tag_id":"ck8mityvg000b5weq9jak40da","_id":"ck8mityvn000z5weqat7k4m70"},{"post_id":"ck8mityvf00095weqhya376p2","tag_id":"ck8mityvi000g5weqgbjzgnr0","_id":"ck8mityvo00125weq5mtyglvn"},{"post_id":"ck8mityvf00095weqhya376p2","tag_id":"ck8mityvn00105weq43ifflll","_id":"ck8mityvo00135weq4lfw1uwh"},{"post_id":"ck8mityvg000c5weq0chedk07","tag_id":"ck8mityvi000g5weqgbjzgnr0","_id":"ck8mityvp00165weq7omkdot8"},{"post_id":"ck8mityvg000c5weq0chedk07","tag_id":"ck8mityvn00105weq43ifflll","_id":"ck8mityvp00175weq2lpxaj5b"},{"post_id":"ck8mityvh000d5weq5v6k5v74","tag_id":"ck8mityvi000g5weqgbjzgnr0","_id":"ck8mityvp00185weq6carewq4"}],"Tag":[{"name":"JavaScript","_id":"ck8mityvc00055weqazvi4y3t"},{"name":"D3","_id":"ck8mityvg000b5weq9jak40da"},{"name":"Java","_id":"ck8mityvi000g5weqgbjzgnr0"},{"name":"JVM","_id":"ck8mityvn00105weq43ifflll"}]}}